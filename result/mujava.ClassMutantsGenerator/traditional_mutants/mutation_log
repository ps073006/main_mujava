AORS_1:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList):++j => j--
AORS_2:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList):++j => j--
AORS_3:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k++ => k--
AOIU_1:68:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => -j
AOIU_2:111:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => -j
AOIU_3:129:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => -k
AOIS_1:49:void_genMutants():classOp.length => ++classOp.length
AOIS_2:49:void_genMutants():classOp.length => --classOp.length
AOIS_3:49:void_genMutants():classOp.length => classOp.length++
AOIS_4:49:void_genMutants():classOp.length => classOp.length--
AOIS_5:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => ++j
AOIS_6:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => --j
AOIS_7:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => j++
AOIS_8:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => j--
AOIS_9:68:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => j++
AOIS_10:68:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => j--
AOIS_11:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => ++j
AOIS_12:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => --j
AOIS_13:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => j++
AOIS_14:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => j--
AOIS_15:111:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => j++
AOIS_16:111:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => j--
AOIS_17:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => ++k
AOIS_18:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => --k
AOIS_19:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => k++
AOIS_20:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => k--
AOIS_21:129:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => k++
AOIS_22:129:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => k--
AOIS_23:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => ++c
AOIS_24:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => --c
AOIS_25:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => c++
AOIS_26:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => c--
AOIS_27:133:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => ++c
AOIS_28:133:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => --c
AOIS_29:133:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => c++
AOIS_30:133:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => c--
AOIS_31:263:void_compileMutants():classOp.length => ++classOp.length
AOIS_32:263:void_compileMutants():classOp.length => --classOp.length
AOIS_33:263:void_compileMutants():classOp.length => classOp.length++
AOIS_34:263:void_compileMutants():classOp.length => classOp.length--
ROR_1:42:void_genMutants(): comp_unit == null  =>   comp_unit != null
ROR_2:46:void_genMutants(): cdecls == null  =>   cdecls != null
ROR_3:46:void_genMutants(): cdecls.size() == 0  =>   cdecls.size() > 0
ROR_4:46:void_genMutants(): cdecls.size() == 0  =>   cdecls.size() >= 0
ROR_5:46:void_genMutants(): cdecls.size() == 0  =>   cdecls.size() < 0
ROR_6:46:void_genMutants(): cdecls.size() == 0  =>   cdecls.size() <= 0
ROR_7:46:void_genMutants(): cdecls.size() == 0  =>   cdecls.size() != 0
ROR_8:46:void_genMutants(): cdecls.size() == 0  =>   true
ROR_9:46:void_genMutants(): cdecls.size() == 0  =>   false
ROR_10:49:void_genMutants(): classOp != null  =>   classOp == null
ROR_11:49:void_genMutants(): classOp.length > 0  =>   classOp.length >= 0
ROR_12:49:void_genMutants(): classOp.length > 0  =>   classOp.length < 0
ROR_13:49:void_genMutants(): classOp.length > 0  =>   classOp.length <= 0
ROR_14:49:void_genMutants(): classOp.length > 0  =>   classOp.length == 0
ROR_15:49:void_genMutants(): classOp.length > 0  =>   classOp.length != 0
ROR_16:49:void_genMutants(): classOp.length > 0  =>   true
ROR_17:49:void_genMutants(): classOp.length > 0  =>   false
ROR_18:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j > cdecls.size()
ROR_19:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j >= cdecls.size()
ROR_20:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j <= cdecls.size()
ROR_21:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j == cdecls.size()
ROR_22:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j != cdecls.size()
ROR_23:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   true
ROR_24:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   false
ROR_25:75:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>   ((mujava.op.IHD) mutant_op).getTotal() >= 0
ROR_26:75:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>   ((mujava.op.IHD) mutant_op).getTotal() < 0
ROR_27:75:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>   ((mujava.op.IHD) mutant_op).getTotal() <= 0
ROR_28:75:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>   ((mujava.op.IHD) mutant_op).getTotal() == 0
ROR_29:75:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>   ((mujava.op.IHD) mutant_op).getTotal() != 0
ROR_30:75:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>   true
ROR_31:75:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>   false
ROR_32:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j > cdecls.size()
ROR_33:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j >= cdecls.size()
ROR_34:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j <= cdecls.size()
ROR_35:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j == cdecls.size()
ROR_36:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j != cdecls.size()
ROR_37:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   true
ROR_38:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   false
ROR_39:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>   k > temp_str.length()
ROR_40:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>   k >= temp_str.length()
ROR_41:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>   k <= temp_str.length()
ROR_42:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>   k == temp_str.length()
ROR_43:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>   k != temp_str.length()
ROR_44:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>   true
ROR_45:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>   false
ROR_46:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>   c > '.'
ROR_47:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>   c >= '.'
ROR_48:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>   c < '.'
ROR_49:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>   c <= '.'
ROR_50:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>   c != '.'
ROR_51:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>   true
ROR_52:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>   false
ROR_53:263:void_compileMutants(): classOp != null  =>   classOp == null
ROR_54:263:void_compileMutants(): classOp.length > 0  =>   classOp.length >= 0
ROR_55:263:void_compileMutants(): classOp.length > 0  =>   classOp.length < 0
ROR_56:263:void_compileMutants(): classOp.length > 0  =>   classOp.length <= 0
ROR_57:263:void_compileMutants(): classOp.length > 0  =>   classOp.length == 0
ROR_58:263:void_compileMutants(): classOp.length > 0  =>   classOp.length != 0
ROR_59:263:void_compileMutants(): classOp.length > 0  =>   true
ROR_60:263:void_compileMutants(): classOp.length > 0  =>   false
COR_1:46:void_genMutants(): cdecls == null || cdecls.size() == 0  =>   cdecls == null && cdecls.size() == 0
COR_2:46:void_genMutants(): cdecls == null || cdecls.size() == 0  =>   cdecls == null ^ cdecls.size() == 0
COR_3:49:void_genMutants(): classOp != null && classOp.length > 0  =>   classOp != null || classOp.length > 0
COR_4:49:void_genMutants(): classOp != null && classOp.length > 0  =>   classOp != null ^ classOp.length > 0
COR_5:263:void_compileMutants(): classOp != null && classOp.length > 0  =>   classOp != null || classOp.length > 0
COR_6:263:void_compileMutants(): classOp != null && classOp.length > 0  =>   classOp != null ^ classOp.length > 0
COD_1:125:void_genClassMutants1(openjava.ptree.ClassDeclarationList):!parent_class.getName().equals( "java.lang.Object" ) => parent_class.getName().equals( "java.lang.Object" )
COI_1:30:ClassMutantsGenerator(java.io.File,boolean): debug  =>  !debug
COI_2:42:void_genMutants(): comp_unit == null  =>  !(comp_unit == null)
COI_3:46:void_genMutants(): cdecls == null  =>  !(cdecls == null)
COI_4:46:void_genMutants(): cdecls.size() == 0  =>  !(cdecls.size() == 0)
COI_5:46:void_genMutants(): cdecls == null || cdecls.size() == 0  =>  !(cdecls == null || cdecls.size() == 0)
COI_6:49:void_genMutants(): classOp != null  =>  !(classOp != null)
COI_7:49:void_genMutants(): classOp.length > 0  =>  !(classOp.length > 0)
COI_8:49:void_genMutants(): classOp != null && classOp.length > 0  =>  !(classOp != null && classOp.length > 0)
COI_9:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>  !(j < cdecls.size())
COI_10:75:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>  !(((mujava.op.IHD) mutant_op).getTotal() > 0)
COI_11:76:void_genClassMutants2(openjava.ptree.ClassDeclarationList): existIHD  =>  !existIHD
COI_12:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>  !(j < cdecls.size())
COI_13:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>  !(k < temp_str.length())
COI_14:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>  !(c == '.')
COI_15:263:void_compileMutants(): classOp != null  =>  !(classOp != null)
COI_16:263:void_compileMutants(): classOp.length > 0  =>  !(classOp.length > 0)
COI_17:263:void_compileMutants(): classOp != null && classOp.length > 0  =>  !(classOp != null && classOp.length > 0)
LOI_1:49:void_genMutants():classOp.length => ~classOp.length
LOI_2:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => ~j
LOI_3:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => ~j
LOI_4:68:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => ~j
LOI_5:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => ~j
LOI_6:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => ~j
LOI_7:111:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => ~j
LOI_8:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => ~k
LOI_9:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => ~k
LOI_10:129:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => ~k
LOI_11:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => ~c
LOI_12:133:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => ~c
LOI_13:263:void_compileMutants():classOp.length => ~classOp.length
SDL_1:25:ClassMutantsGenerator(java.io.File): classOp = MutationSystem.cm_operators;  =>  
SDL_2:31:ClassMutantsGenerator(java.io.File,boolean): classOp = MutationSystem.cm_operators;  =>  
SDL_3:37:ClassMutantsGenerator(java.io.File,java.lang.String[]): classOp = cOP;  =>  
SDL_4:54:void_genMutants(): if (comp_unit == null) {     System.err.println( original_file + \" is skipped.\" ); } openjava.ptree.ClassDeclarationList cdecls = comp_unit.getClassDeclarations(); if (cdecls == null || cdecls.size() == 0) {     return; } if (classOp != null && classOp.length > 0) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }  =>   openjava.ptree.ClassDeclarationList cdecls = comp_unit.getClassDeclarations(); if (cdecls == null || cdecls.size() == 0) {     return; } if (classOp != null && classOp.length > 0) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }
SDL_5:54:void_genMutants(): if (comp_unit == null) {     System.err.println( original_file + \" is skipped.\" ); } openjava.ptree.ClassDeclarationList cdecls = comp_unit.getClassDeclarations(); if (cdecls == null || cdecls.size() == 0) {     return; } if (classOp != null && classOp.length > 0) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }  =>   if (comp_unit == null) {     System.err.println( original_file + \" is skipped.\" ); } openjava.ptree.ClassDeclarationList cdecls = comp_unit.getClassDeclarations(); if (classOp != null && classOp.length > 0) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }
SDL_6:49:void_genMutants(): if (comp_unit == null) {     System.err.println( original_file + \" is skipped.\" ); } openjava.ptree.ClassDeclarationList cdecls = comp_unit.getClassDeclarations(); if (cdecls == null || cdecls.size() == 0) {     return; } if (classOp != null && classOp.length > 0) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }  =>   if (comp_unit == null) {     System.err.println( original_file + \" is skipped.\" ); } openjava.ptree.ClassDeclarationList cdecls = comp_unit.getClassDeclarations(); if (cdecls == null || cdecls.size() == 0) {     return; }
SDL_7:43:void_genMutants(): System.err.println( original_file + \" is skipped.\" );  =>  
SDL_8:45:void_genMutants(): if (comp_unit == null) {     System.err.println( original_file + \" is skipped.\" ); }  =>   if (true) {     System.err.println( original_file + \" is skipped.\" ); }
SDL_9:49:void_genMutants(): if (cdecls == null || cdecls.size() == 0) {     return; }  =>   if (true) {     return; }
SDL_10:55:void_genMutants(): Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();
SDL_11:55:void_genMutants(): Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating class mutants\" ); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();
SDL_12:55:void_genMutants(): Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();
SDL_13:55:void_genMutants(): Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; genClassMutants( cdecls ); CodeChangeLog.closeLogFile();
SDL_14:55:void_genMutants(): Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); CodeChangeLog.closeLogFile();
SDL_15:55:void_genMutants(): Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls );
SDL_16:57:void_genMutants(): if (classOp != null && classOp.length > 0) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }  =>   if (true) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }
SDL_17:62:void_genClassMutants(openjava.ptree.ClassDeclarationList): genClassMutants1( cdecls ); genClassMutants2( cdecls );  =>   genClassMutants2( cdecls );
SDL_18:62:void_genClassMutants(openjava.ptree.ClassDeclarationList): genClassMutants1( cdecls ); genClassMutants2( cdecls );  =>   genClassMutants1( cdecls );
SDL_19:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         mujava.op.util.DeclAnalyzer mutant_op;         if (hasOperator( classOp, \"IHD\" )) {             Debug.println( \"  Applying IHD ... ... \" );             mutant_op = new mujava.op.IHD( file_env, null, cdecl );             generateMutant( mutant_op );             if (((mujava.op.IHD) mutant_op).getTotal() > 0) {                 existIHD = true;             }         }         if (hasOperator( classOp, \"IHI\" )) {             Debug.println( \"  Applying IHI ... ... \" );             mutant_op = new mujava.op.IHI( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"IOD\" )) {             Debug.println( \"  Applying IOD ... ... \" );             mutant_op = new mujava.op.IOD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMR\" )) {             Debug.println( \"  Applying OMR ... ... \" );             mutant_op = new mujava.op.OMR( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMD\" )) {             Debug.println( \"  Applying OMD ... ... \" );             mutant_op = new mujava.op.OMD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"JDC\" )) {             Debug.println( \"  Applying JDC ... ... \" );             mutant_op = new mujava.op.JDC( file_env, null, cdecl );             generateMutant( mutant_op );         }     } }  =>  
SDL_20:69:void_genClassMutants2(openjava.ptree.ClassDeclarationList): openjava.ptree.ClassDeclaration cdecl = cdecls.get( j ); if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {     mujava.op.util.DeclAnalyzer mutant_op;     if (hasOperator( classOp, \"IHD\" )) {         Debug.println( \"  Applying IHD ... ... \" );         mutant_op = new mujava.op.IHD( file_env, null, cdecl );         generateMutant( mutant_op );         if (((mujava.op.IHD) mutant_op).getTotal() > 0) {             existIHD = true;         }     }     if (hasOperator( classOp, \"IHI\" )) {         Debug.println( \"  Applying IHI ... ... \" );         mutant_op = new mujava.op.IHI( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"IOD\" )) {         Debug.println( \"  Applying IOD ... ... \" );         mutant_op = new mujava.op.IOD( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"OMR\" )) {         Debug.println( \"  Applying OMR ... ... \" );         mutant_op = new mujava.op.OMR( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"OMD\" )) {         Debug.println( \"  Applying OMD ... ... \" );         mutant_op = new mujava.op.OMD( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"JDC\" )) {         Debug.println( \"  Applying JDC ... ... \" );         mutant_op = new mujava.op.JDC( file_env, null, cdecl );         generateMutant( mutant_op );     } }  =>   openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );
SDL_21:106:void_genClassMutants2(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         mujava.op.util.DeclAnalyzer mutant_op;         if (hasOperator( classOp, \"IHD\" )) {             Debug.println( \"  Applying IHD ... ... \" );             mutant_op = new mujava.op.IHD( file_env, null, cdecl );             generateMutant( mutant_op );             if (((mujava.op.IHD) mutant_op).getTotal() > 0) {                 existIHD = true;             }         }         if (hasOperator( classOp, \"IHI\" )) {             Debug.println( \"  Applying IHI ... ... \" );             mutant_op = new mujava.op.IHI( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"IOD\" )) {             Debug.println( \"  Applying IOD ... ... \" );             mutant_op = new mujava.op.IOD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMR\" )) {             Debug.println( \"  Applying OMR ... ... \" );             mutant_op = new mujava.op.OMR( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMD\" )) {             Debug.println( \"  Applying OMD ... ... \" );             mutant_op = new mujava.op.OMD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"JDC\" )) {             Debug.println( \"  Applying JDC ... ... \" );             mutant_op = new mujava.op.JDC( file_env, null, cdecl );             generateMutant( mutant_op );         }     } }  =>   for (int j = 0;; ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         mujava.op.util.DeclAnalyzer mutant_op;         if (hasOperator( classOp, \"IHD\" )) {             Debug.println( \"  Applying IHD ... ... \" );             mutant_op = new mujava.op.IHD( file_env, null, cdecl );             generateMutant( mutant_op );             if (((mujava.op.IHD) mutant_op).getTotal() > 0) {                 existIHD = true;             }         }         if (hasOperator( classOp, \"IHI\" )) {             Debug.println( \"  Applying IHI ... ... \" );             mutant_op = new mujava.op.IHI( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"IOD\" )) {             Debug.println( \"  Applying IOD ... ... \" );             mutant_op = new mujava.op.IOD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMR\" )) {             Debug.println( \"  Applying OMR ... ... \" );             mutant_op = new mujava.op.OMR( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMD\" )) {             Debug.println( \"  Applying OMD ... ... \" );             mutant_op = new mujava.op.OMD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"JDC\" )) {             Debug.println( \"  Applying JDC ... ... \" );             mutant_op = new mujava.op.JDC( file_env, null, cdecl );             generateMutant( mutant_op );         }     } }
SDL_22:106:void_genClassMutants2(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         mujava.op.util.DeclAnalyzer mutant_op;         if (hasOperator( classOp, \"IHD\" )) {             Debug.println( \"  Applying IHD ... ... \" );             mutant_op = new mujava.op.IHD( file_env, null, cdecl );             generateMutant( mutant_op );             if (((mujava.op.IHD) mutant_op).getTotal() > 0) {                 existIHD = true;             }         }         if (hasOperator( classOp, \"IHI\" )) {             Debug.println( \"  Applying IHI ... ... \" );             mutant_op = new mujava.op.IHI( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"IOD\" )) {             Debug.println( \"  Applying IOD ... ... \" );             mutant_op = new mujava.op.IOD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMR\" )) {             Debug.println( \"  Applying OMR ... ... \" );             mutant_op = new mujava.op.OMR( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMD\" )) {             Debug.println( \"  Applying OMD ... ... \" );             mutant_op = new mujava.op.OMD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"JDC\" )) {             Debug.println( \"  Applying JDC ... ... \" );             mutant_op = new mujava.op.JDC( file_env, null, cdecl );             generateMutant( mutant_op );         }     } }  =>   for (int j = 0; j < cdecls.size();) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         mujava.op.util.DeclAnalyzer mutant_op;         if (hasOperator( classOp, \"IHD\" )) {             Debug.println( \"  Applying IHD ... ... \" );             mutant_op = new mujava.op.IHD( file_env, null, cdecl );             generateMutant( mutant_op );             if (((mujava.op.IHD) mutant_op).getTotal() > 0) {                 existIHD = true;             }         }         if (hasOperator( classOp, \"IHI\" )) {             Debug.println( \"  Applying IHI ... ... \" );             mutant_op = new mujava.op.IHI( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"IOD\" )) {             Debug.println( \"  Applying IOD ... ... \" );             mutant_op = new mujava.op.IOD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMR\" )) {             Debug.println( \"  Applying OMR ... ... \" );             mutant_op = new mujava.op.OMR( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMD\" )) {             Debug.println( \"  Applying OMD ... ... \" );             mutant_op = new mujava.op.OMD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"JDC\" )) {             Debug.println( \"  Applying JDC ... ... \" );             mutant_op = new mujava.op.JDC( file_env, null, cdecl );             generateMutant( mutant_op );         }     } }
SDL_23:96:void_genClassMutants2(openjava.ptree.ClassDeclarationList): mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_24:99:void_genClassMutants2(openjava.ptree.ClassDeclarationList): mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_25:99:void_genClassMutants2(openjava.ptree.ClassDeclarationList): mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_26:99:void_genClassMutants2(openjava.ptree.ClassDeclarationList): mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_27:99:void_genClassMutants2(openjava.ptree.ClassDeclarationList): mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_28:99:void_genClassMutants2(openjava.ptree.ClassDeclarationList): mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_29:105:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {     mujava.op.util.DeclAnalyzer mutant_op;     if (hasOperator( classOp, \"IHD\" )) {         Debug.println( \"  Applying IHD ... ... \" );         mutant_op = new mujava.op.IHD( file_env, null, cdecl );         generateMutant( mutant_op );         if (((mujava.op.IHD) mutant_op).getTotal() > 0) {             existIHD = true;         }     }     if (hasOperator( classOp, \"IHI\" )) {         Debug.println( \"  Applying IHI ... ... \" );         mutant_op = new mujava.op.IHI( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"IOD\" )) {         Debug.println( \"  Applying IOD ... ... \" );         mutant_op = new mujava.op.IOD( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"OMR\" )) {         Debug.println( \"  Applying OMR ... ... \" );         mutant_op = new mujava.op.OMR( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"OMD\" )) {         Debug.println( \"  Applying OMD ... ... \" );         mutant_op = new mujava.op.OMD( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"JDC\" )) {         Debug.println( \"  Applying JDC ... ... \" );         mutant_op = new mujava.op.JDC( file_env, null, cdecl );         generateMutant( mutant_op );     } }  =>   if (true) {     mujava.op.util.DeclAnalyzer mutant_op;     if (hasOperator( classOp, \"IHD\" )) {         Debug.println( \"  Applying IHD ... ... \" );         mutant_op = new mujava.op.IHD( file_env, null, cdecl );         generateMutant( mutant_op );         if (((mujava.op.IHD) mutant_op).getTotal() > 0) {             existIHD = true;         }     }     if (hasOperator( classOp, \"IHI\" )) {         Debug.println( \"  Applying IHI ... ... \" );         mutant_op = new mujava.op.IHI( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"IOD\" )) {         Debug.println( \"  Applying IOD ... ... \" );         mutant_op = new mujava.op.IOD( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"OMR\" )) {         Debug.println( \"  Applying OMR ... ... \" );         mutant_op = new mujava.op.OMR( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"OMD\" )) {         Debug.println( \"  Applying OMD ... ... \" );         mutant_op = new mujava.op.OMD( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"JDC\" )) {         Debug.println( \"  Applying JDC ... ... \" );         mutant_op = new mujava.op.JDC( file_env, null, cdecl );         generateMutant( mutant_op );     } }
SDL_30:77:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IHD ... ... \" ); mutant_op = new mujava.op.IHD( file_env, null, cdecl ); generateMutant( mutant_op ); if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }  =>   mutant_op = new mujava.op.IHD( file_env, null, cdecl ); generateMutant( mutant_op ); if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }
SDL_31:77:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IHD ... ... \" ); mutant_op = new mujava.op.IHD( file_env, null, cdecl ); generateMutant( mutant_op ); if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }  =>   Debug.println( \"  Applying IHD ... ... \" ); generateMutant( mutant_op ); if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }
SDL_32:77:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IHD ... ... \" ); mutant_op = new mujava.op.IHD( file_env, null, cdecl ); generateMutant( mutant_op ); if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }  =>   Debug.println( \"  Applying IHD ... ... \" ); mutant_op = new mujava.op.IHD( file_env, null, cdecl ); if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }
SDL_33:75:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IHD ... ... \" ); mutant_op = new mujava.op.IHD( file_env, null, cdecl ); generateMutant( mutant_op ); if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }  =>   Debug.println( \"  Applying IHD ... ... \" ); mutant_op = new mujava.op.IHD( file_env, null, cdecl ); generateMutant( mutant_op );
SDL_34:79:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } }  =>   if (true) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } }
SDL_35:76:void_genClassMutants2(openjava.ptree.ClassDeclarationList): existIHD = true;  =>  
SDL_36:78:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }  =>   if (true) {     existIHD = true; }
SDL_37:82:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IHI ... ... \" ); mutant_op = new mujava.op.IHI( file_env, null, cdecl ); generateMutant( mutant_op );  =>   mutant_op = new mujava.op.IHI( file_env, null, cdecl ); generateMutant( mutant_op );
SDL_38:82:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IHI ... ... \" ); mutant_op = new mujava.op.IHI( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying IHI ... ... \" ); generateMutant( mutant_op );
SDL_39:82:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IHI ... ... \" ); mutant_op = new mujava.op.IHI( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying IHI ... ... \" ); mutant_op = new mujava.op.IHI( file_env, null, cdecl );
SDL_40:84:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_41:87:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IOD ... ... \" ); mutant_op = new mujava.op.IOD( file_env, null, cdecl ); generateMutant( mutant_op );  =>   mutant_op = new mujava.op.IOD( file_env, null, cdecl ); generateMutant( mutant_op );
SDL_42:87:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IOD ... ... \" ); mutant_op = new mujava.op.IOD( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying IOD ... ... \" ); generateMutant( mutant_op );
SDL_43:87:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IOD ... ... \" ); mutant_op = new mujava.op.IOD( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying IOD ... ... \" ); mutant_op = new mujava.op.IOD( file_env, null, cdecl );
SDL_44:89:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_45:92:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OMR ... ... \" ); mutant_op = new mujava.op.OMR( file_env, null, cdecl ); generateMutant( mutant_op );  =>   mutant_op = new mujava.op.OMR( file_env, null, cdecl ); generateMutant( mutant_op );
SDL_46:92:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OMR ... ... \" ); mutant_op = new mujava.op.OMR( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying OMR ... ... \" ); generateMutant( mutant_op );
SDL_47:92:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OMR ... ... \" ); mutant_op = new mujava.op.OMR( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying OMR ... ... \" ); mutant_op = new mujava.op.OMR( file_env, null, cdecl );
SDL_48:94:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_49:97:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OMD ... ... \" ); mutant_op = new mujava.op.OMD( file_env, null, cdecl ); generateMutant( mutant_op );  =>   mutant_op = new mujava.op.OMD( file_env, null, cdecl ); generateMutant( mutant_op );
SDL_50:97:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OMD ... ... \" ); mutant_op = new mujava.op.OMD( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying OMD ... ... \" ); generateMutant( mutant_op );
SDL_51:97:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OMD ... ... \" ); mutant_op = new mujava.op.OMD( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying OMD ... ... \" ); mutant_op = new mujava.op.OMD( file_env, null, cdecl );
SDL_52:99:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_53:102:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JDC ... ... \" ); mutant_op = new mujava.op.JDC( file_env, null, cdecl ); generateMutant( mutant_op );  =>   mutant_op = new mujava.op.JDC( file_env, null, cdecl ); generateMutant( mutant_op );
SDL_54:102:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JDC ... ... \" ); mutant_op = new mujava.op.JDC( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying JDC ... ... \" ); generateMutant( mutant_op );
SDL_55:102:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JDC ... ... \" ); mutant_op = new mujava.op.JDC( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying JDC ... ... \" ); mutant_op = new mujava.op.JDC( file_env, null, cdecl );
SDL_56:104:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_57:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );         try {             mujava.op.util.Mutator mutant_op;             if (hasOperator( classOp, \"AMC\" )) {                 Debug.println( \"  Applying AMC ... ... \" );                 mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOR\" )) {                 Debug.println( \"  Applying IOR ... ... \" );                 try {                     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                     if (!parent_class.getName().equals( \"java.lang.Object\" )) {                         java.lang.String temp_str = parent_class.getName();                         java.lang.String result_str = \"\";                         for (int k = 0; k < temp_str.length(); k++) {                             char c = temp_str.charAt( k );                             if (c == '.') {                                 result_str = result_str + \"/\";                             } else {                                 result_str = result_str + c;                             }                         }                         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                         if (f.exists()) {                             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                             this.generateParseTree( f, parent_comp_unit, parent_file_env );                             this.initParseTree( parent_comp_unit, parent_file_env );                             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                             comp_unit.accept( mutant_op );                         }                     }                 } catch ( java.lang.ClassNotFoundException e ) {                     System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );                 } catch ( java.lang.NullPointerException e1 ) {                     System.out.print( \" IOP  ^^; \" );                 }             }             if (hasOperator( classOp, \"ISD\" )) {                 Debug.println( \"  Applying ISD ... ... \" );                 mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOP\" )) {                 Debug.println( \"  Applying IOP ... ... \" );                 mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IPC\" )) {                 Debug.println( \"  Applying IPC ... ... \" );                 mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PNC\" )) {                 Debug.println( \"  Applying PNC ... ... \" );                 mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PMD\" )) {                 Debug.println( \"  Applying PMD ... ... \" );                 mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PPD\" )) {                 Debug.println( \"  Applying PPD ... ... \" );                 mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PRV\" )) {                 Debug.println( \"  Applying PRV ... ... \" );                 mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCI\" )) {                 Debug.println( \"  Applying PCI ... ... \" );                 mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCC\" )) {                 Debug.println( \"  Applying PCC ... ... \" );                 mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCD\" )) {                 Debug.println( \"  Applying PCD ... ... \" );                 mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSD\" )) {                 Debug.println( \"  Applying JSC ... ... \" );                 mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSI\" )) {                 Debug.println( \"  Applying JSI ... ... \" );                 mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTD\" )) {                 Debug.println( \"  Applying JTD ... ... \" );                 mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTI\" )) {                 Debug.println( \"  Applying JTI ... ... \" );                 mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JID\" )) {                 Debug.println( \"  Applying JID ... ... \" );                 mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"OAN\" )) {                 Debug.println( \"  Applying OAN ... ... \" );                 mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOA\" )) {                 Debug.println( \"  Applying EOA ... ... \" );                 mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOC\" )) {                 Debug.println( \"  Applying EOC ... ... \" );                 mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EAM\" )) {                 Debug.println( \"  Applying EAM ... ... \" );                 mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EMM\" )) {                 Debug.println( \"  Applying EMM ... ... \" );                 mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Encountered errors during generating mutants.\" );             e.printStackTrace();         }     } }  =>  
SDL_58:112:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.ClassDeclaration cdecl = cdecls.get( j ); if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {     java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );     try {         mujava.op.util.Mutator mutant_op;         if (hasOperator( classOp, \"AMC\" )) {             Debug.println( \"  Applying AMC ... ... \" );             mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IOR\" )) {             Debug.println( \"  Applying IOR ... ... \" );             try {                 java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                 if (!parent_class.getName().equals( \"java.lang.Object\" )) {                     java.lang.String temp_str = parent_class.getName();                     java.lang.String result_str = \"\";                     for (int k = 0; k < temp_str.length(); k++) {                         char c = temp_str.charAt( k );                         if (c == '.') {                             result_str = result_str + \"/\";                         } else {                             result_str = result_str + c;                         }                     }                     java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                     if (f.exists()) {                         openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                         openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                         this.generateParseTree( f, parent_comp_unit, parent_file_env );                         this.initParseTree( parent_comp_unit, parent_file_env );                         mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                         ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                         comp_unit.accept( mutant_op );                     }                 }             } catch ( java.lang.ClassNotFoundException e ) {                 System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );             } catch ( java.lang.NullPointerException e1 ) {                 System.out.print( \" IOP  ^^; \" );             }         }         if (hasOperator( classOp, \"ISD\" )) {             Debug.println( \"  Applying ISD ... ... \" );             mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IOP\" )) {             Debug.println( \"  Applying IOP ... ... \" );             mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IPC\" )) {             Debug.println( \"  Applying IPC ... ... \" );             mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PNC\" )) {             Debug.println( \"  Applying PNC ... ... \" );             mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PMD\" )) {             Debug.println( \"  Applying PMD ... ... \" );             mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PPD\" )) {             Debug.println( \"  Applying PPD ... ... \" );             mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PRV\" )) {             Debug.println( \"  Applying PRV ... ... \" );             mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCI\" )) {             Debug.println( \"  Applying PCI ... ... \" );             mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCC\" )) {             Debug.println( \"  Applying PCC ... ... \" );             mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCD\" )) {             Debug.println( \"  Applying PCD ... ... \" );             mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JSD\" )) {             Debug.println( \"  Applying JSC ... ... \" );             mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JSI\" )) {             Debug.println( \"  Applying JSI ... ... \" );             mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JTD\" )) {             Debug.println( \"  Applying JTD ... ... \" );             mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JTI\" )) {             Debug.println( \"  Applying JTI ... ... \" );             mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JID\" )) {             Debug.println( \"  Applying JID ... ... \" );             mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"OAN\" )) {             Debug.println( \"  Applying OAN ... ... \" );             mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EOA\" )) {             Debug.println( \"  Applying EOA ... ... \" );             mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EOC\" )) {             Debug.println( \"  Applying EOC ... ... \" );             mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EAM\" )) {             Debug.println( \"  Applying EAM ... ... \" );             mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EMM\" )) {             Debug.println( \"  Applying EMM ... ... \" );             mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }     } catch ( openjava.ptree.ParseTreeException e ) {         System.err.println( \"Encountered errors during generating mutants.\" );         e.printStackTrace();     } }  =>   openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );
SDL_59:259:void_genClassMutants1(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );         try {             mujava.op.util.Mutator mutant_op;             if (hasOperator( classOp, \"AMC\" )) {                 Debug.println( \"  Applying AMC ... ... \" );                 mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOR\" )) {                 Debug.println( \"  Applying IOR ... ... \" );                 try {                     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                     if (!parent_class.getName().equals( \"java.lang.Object\" )) {                         java.lang.String temp_str = parent_class.getName();                         java.lang.String result_str = \"\";                         for (int k = 0; k < temp_str.length(); k++) {                             char c = temp_str.charAt( k );                             if (c == '.') {                                 result_str = result_str + \"/\";                             } else {                                 result_str = result_str + c;                             }                         }                         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                         if (f.exists()) {                             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                             this.generateParseTree( f, parent_comp_unit, parent_file_env );                             this.initParseTree( parent_comp_unit, parent_file_env );                             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                             comp_unit.accept( mutant_op );                         }                     }                 } catch ( java.lang.ClassNotFoundException e ) {                     System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );                 } catch ( java.lang.NullPointerException e1 ) {                     System.out.print( \" IOP  ^^; \" );                 }             }             if (hasOperator( classOp, \"ISD\" )) {                 Debug.println( \"  Applying ISD ... ... \" );                 mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOP\" )) {                 Debug.println( \"  Applying IOP ... ... \" );                 mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IPC\" )) {                 Debug.println( \"  Applying IPC ... ... \" );                 mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PNC\" )) {                 Debug.println( \"  Applying PNC ... ... \" );                 mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PMD\" )) {                 Debug.println( \"  Applying PMD ... ... \" );                 mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PPD\" )) {                 Debug.println( \"  Applying PPD ... ... \" );                 mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PRV\" )) {                 Debug.println( \"  Applying PRV ... ... \" );                 mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCI\" )) {                 Debug.println( \"  Applying PCI ... ... \" );                 mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCC\" )) {                 Debug.println( \"  Applying PCC ... ... \" );                 mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCD\" )) {                 Debug.println( \"  Applying PCD ... ... \" );                 mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSD\" )) {                 Debug.println( \"  Applying JSC ... ... \" );                 mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSI\" )) {                 Debug.println( \"  Applying JSI ... ... \" );                 mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTD\" )) {                 Debug.println( \"  Applying JTD ... ... \" );                 mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTI\" )) {                 Debug.println( \"  Applying JTI ... ... \" );                 mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JID\" )) {                 Debug.println( \"  Applying JID ... ... \" );                 mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"OAN\" )) {                 Debug.println( \"  Applying OAN ... ... \" );                 mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOA\" )) {                 Debug.println( \"  Applying EOA ... ... \" );                 mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOC\" )) {                 Debug.println( \"  Applying EOC ... ... \" );                 mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EAM\" )) {                 Debug.println( \"  Applying EAM ... ... \" );                 mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EMM\" )) {                 Debug.println( \"  Applying EMM ... ... \" );                 mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Encountered errors during generating mutants.\" );             e.printStackTrace();         }     } }  =>   for (int j = 0;; ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );         try {             mujava.op.util.Mutator mutant_op;             if (hasOperator( classOp, \"AMC\" )) {                 Debug.println( \"  Applying AMC ... ... \" );                 mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOR\" )) {                 Debug.println( \"  Applying IOR ... ... \" );                 try {                     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                     if (!parent_class.getName().equals( \"java.lang.Object\" )) {                         java.lang.String temp_str = parent_class.getName();                         java.lang.String result_str = \"\";                         for (int k = 0; k < temp_str.length(); k++) {                             char c = temp_str.charAt( k );                             if (c == '.') {                                 result_str = result_str + \"/\";                             } else {                                 result_str = result_str + c;                             }                         }                         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                         if (f.exists()) {                             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                             this.generateParseTree( f, parent_comp_unit, parent_file_env );                             this.initParseTree( parent_comp_unit, parent_file_env );                             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                             comp_unit.accept( mutant_op );                         }                     }                 } catch ( java.lang.ClassNotFoundException e ) {                     System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );                 } catch ( java.lang.NullPointerException e1 ) {                     System.out.print( \" IOP  ^^; \" );                 }             }             if (hasOperator( classOp, \"ISD\" )) {                 Debug.println( \"  Applying ISD ... ... \" );                 mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOP\" )) {                 Debug.println( \"  Applying IOP ... ... \" );                 mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IPC\" )) {                 Debug.println( \"  Applying IPC ... ... \" );                 mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PNC\" )) {                 Debug.println( \"  Applying PNC ... ... \" );                 mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PMD\" )) {                 Debug.println( \"  Applying PMD ... ... \" );                 mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PPD\" )) {                 Debug.println( \"  Applying PPD ... ... \" );                 mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PRV\" )) {                 Debug.println( \"  Applying PRV ... ... \" );                 mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCI\" )) {                 Debug.println( \"  Applying PCI ... ... \" );                 mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCC\" )) {                 Debug.println( \"  Applying PCC ... ... \" );                 mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCD\" )) {                 Debug.println( \"  Applying PCD ... ... \" );                 mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSD\" )) {                 Debug.println( \"  Applying JSC ... ... \" );                 mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSI\" )) {                 Debug.println( \"  Applying JSI ... ... \" );                 mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTD\" )) {                 Debug.println( \"  Applying JTD ... ... \" );                 mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTI\" )) {                 Debug.println( \"  Applying JTI ... ... \" );                 mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JID\" )) {                 Debug.println( \"  Applying JID ... ... \" );                 mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"OAN\" )) {                 Debug.println( \"  Applying OAN ... ... \" );                 mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOA\" )) {                 Debug.println( \"  Applying EOA ... ... \" );                 mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOC\" )) {                 Debug.println( \"  Applying EOC ... ... \" );                 mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EAM\" )) {                 Debug.println( \"  Applying EAM ... ... \" );                 mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EMM\" )) {                 Debug.println( \"  Applying EMM ... ... \" );                 mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Encountered errors during generating mutants.\" );             e.printStackTrace();         }     } }
SDL_60:259:void_genClassMutants1(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );         try {             mujava.op.util.Mutator mutant_op;             if (hasOperator( classOp, \"AMC\" )) {                 Debug.println( \"  Applying AMC ... ... \" );                 mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOR\" )) {                 Debug.println( \"  Applying IOR ... ... \" );                 try {                     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                     if (!parent_class.getName().equals( \"java.lang.Object\" )) {                         java.lang.String temp_str = parent_class.getName();                         java.lang.String result_str = \"\";                         for (int k = 0; k < temp_str.length(); k++) {                             char c = temp_str.charAt( k );                             if (c == '.') {                                 result_str = result_str + \"/\";                             } else {                                 result_str = result_str + c;                             }                         }                         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                         if (f.exists()) {                             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                             this.generateParseTree( f, parent_comp_unit, parent_file_env );                             this.initParseTree( parent_comp_unit, parent_file_env );                             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                             comp_unit.accept( mutant_op );                         }                     }                 } catch ( java.lang.ClassNotFoundException e ) {                     System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );                 } catch ( java.lang.NullPointerException e1 ) {                     System.out.print( \" IOP  ^^; \" );                 }             }             if (hasOperator( classOp, \"ISD\" )) {                 Debug.println( \"  Applying ISD ... ... \" );                 mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOP\" )) {                 Debug.println( \"  Applying IOP ... ... \" );                 mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IPC\" )) {                 Debug.println( \"  Applying IPC ... ... \" );                 mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PNC\" )) {                 Debug.println( \"  Applying PNC ... ... \" );                 mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PMD\" )) {                 Debug.println( \"  Applying PMD ... ... \" );                 mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PPD\" )) {                 Debug.println( \"  Applying PPD ... ... \" );                 mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PRV\" )) {                 Debug.println( \"  Applying PRV ... ... \" );                 mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCI\" )) {                 Debug.println( \"  Applying PCI ... ... \" );                 mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCC\" )) {                 Debug.println( \"  Applying PCC ... ... \" );                 mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCD\" )) {                 Debug.println( \"  Applying PCD ... ... \" );                 mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSD\" )) {                 Debug.println( \"  Applying JSC ... ... \" );                 mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSI\" )) {                 Debug.println( \"  Applying JSI ... ... \" );                 mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTD\" )) {                 Debug.println( \"  Applying JTD ... ... \" );                 mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTI\" )) {                 Debug.println( \"  Applying JTI ... ... \" );                 mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JID\" )) {                 Debug.println( \"  Applying JID ... ... \" );                 mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"OAN\" )) {                 Debug.println( \"  Applying OAN ... ... \" );                 mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOA\" )) {                 Debug.println( \"  Applying EOA ... ... \" );                 mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOC\" )) {                 Debug.println( \"  Applying EOC ... ... \" );                 mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EAM\" )) {                 Debug.println( \"  Applying EAM ... ... \" );                 mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EMM\" )) {                 Debug.println( \"  Applying EMM ... ... \" );                 mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Encountered errors during generating mutants.\" );             e.printStackTrace();         }     } }  =>   for (int j = 0; j < cdecls.size();) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );         try {             mujava.op.util.Mutator mutant_op;             if (hasOperator( classOp, \"AMC\" )) {                 Debug.println( \"  Applying AMC ... ... \" );                 mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOR\" )) {                 Debug.println( \"  Applying IOR ... ... \" );                 try {                     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                     if (!parent_class.getName().equals( \"java.lang.Object\" )) {                         java.lang.String temp_str = parent_class.getName();                         java.lang.String result_str = \"\";                         for (int k = 0; k < temp_str.length(); k++) {                             char c = temp_str.charAt( k );                             if (c == '.') {                                 result_str = result_str + \"/\";                             } else {                                 result_str = result_str + c;                             }                         }                         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                         if (f.exists()) {                             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                             this.generateParseTree( f, parent_comp_unit, parent_file_env );                             this.initParseTree( parent_comp_unit, parent_file_env );                             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                             comp_unit.accept( mutant_op );                         }                     }                 } catch ( java.lang.ClassNotFoundException e ) {                     System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );                 } catch ( java.lang.NullPointerException e1 ) {                     System.out.print( \" IOP  ^^; \" );                 }             }             if (hasOperator( classOp, \"ISD\" )) {                 Debug.println( \"  Applying ISD ... ... \" );                 mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOP\" )) {                 Debug.println( \"  Applying IOP ... ... \" );                 mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IPC\" )) {                 Debug.println( \"  Applying IPC ... ... \" );                 mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PNC\" )) {                 Debug.println( \"  Applying PNC ... ... \" );                 mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PMD\" )) {                 Debug.println( \"  Applying PMD ... ... \" );                 mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PPD\" )) {                 Debug.println( \"  Applying PPD ... ... \" );                 mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PRV\" )) {                 Debug.println( \"  Applying PRV ... ... \" );                 mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCI\" )) {                 Debug.println( \"  Applying PCI ... ... \" );                 mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCC\" )) {                 Debug.println( \"  Applying PCC ... ... \" );                 mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCD\" )) {                 Debug.println( \"  Applying PCD ... ... \" );                 mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSD\" )) {                 Debug.println( \"  Applying JSC ... ... \" );                 mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSI\" )) {                 Debug.println( \"  Applying JSI ... ... \" );                 mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTD\" )) {                 Debug.println( \"  Applying JTD ... ... \" );                 mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTI\" )) {                 Debug.println( \"  Applying JTI ... ... \" );                 mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JID\" )) {                 Debug.println( \"  Applying JID ... ... \" );                 mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"OAN\" )) {                 Debug.println( \"  Applying OAN ... ... \" );                 mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOA\" )) {                 Debug.println( \"  Applying EOA ... ... \" );                 mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOC\" )) {                 Debug.println( \"  Applying EOC ... ... \" );                 mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EAM\" )) {                 Debug.println( \"  Applying EAM ... ... \" );                 mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EMM\" )) {                 Debug.println( \"  Applying EMM ... ... \" );                 mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Encountered errors during generating mutants.\" );             e.printStackTrace();         }     } }
SDL_61:258:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {     java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );     try {         mujava.op.util.Mutator mutant_op;         if (hasOperator( classOp, \"AMC\" )) {             Debug.println( \"  Applying AMC ... ... \" );             mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IOR\" )) {             Debug.println( \"  Applying IOR ... ... \" );             try {                 java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                 if (!parent_class.getName().equals( \"java.lang.Object\" )) {                     java.lang.String temp_str = parent_class.getName();                     java.lang.String result_str = \"\";                     for (int k = 0; k < temp_str.length(); k++) {                         char c = temp_str.charAt( k );                         if (c == '.') {                             result_str = result_str + \"/\";                         } else {                             result_str = result_str + c;                         }                     }                     java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                     if (f.exists()) {                         openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                         openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                         this.generateParseTree( f, parent_comp_unit, parent_file_env );                         this.initParseTree( parent_comp_unit, parent_file_env );                         mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                         ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                         comp_unit.accept( mutant_op );                     }                 }             } catch ( java.lang.ClassNotFoundException e ) {                 System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );             } catch ( java.lang.NullPointerException e1 ) {                 System.out.print( \" IOP  ^^; \" );             }         }         if (hasOperator( classOp, \"ISD\" )) {             Debug.println( \"  Applying ISD ... ... \" );             mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IOP\" )) {             Debug.println( \"  Applying IOP ... ... \" );             mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IPC\" )) {             Debug.println( \"  Applying IPC ... ... \" );             mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PNC\" )) {             Debug.println( \"  Applying PNC ... ... \" );             mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PMD\" )) {             Debug.println( \"  Applying PMD ... ... \" );             mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PPD\" )) {             Debug.println( \"  Applying PPD ... ... \" );             mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PRV\" )) {             Debug.println( \"  Applying PRV ... ... \" );             mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCI\" )) {             Debug.println( \"  Applying PCI ... ... \" );             mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCC\" )) {             Debug.println( \"  Applying PCC ... ... \" );             mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCD\" )) {             Debug.println( \"  Applying PCD ... ... \" );             mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JSD\" )) {             Debug.println( \"  Applying JSC ... ... \" );             mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JSI\" )) {             Debug.println( \"  Applying JSI ... ... \" );             mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JTD\" )) {             Debug.println( \"  Applying JTD ... ... \" );             mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JTI\" )) {             Debug.println( \"  Applying JTI ... ... \" );             mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JID\" )) {             Debug.println( \"  Applying JID ... ... \" );             mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"OAN\" )) {             Debug.println( \"  Applying OAN ... ... \" );             mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EOA\" )) {             Debug.println( \"  Applying EOA ... ... \" );             mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EOC\" )) {             Debug.println( \"  Applying EOC ... ... \" );             mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EAM\" )) {             Debug.println( \"  Applying EAM ... ... \" );             mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EMM\" )) {             Debug.println( \"  Applying EMM ... ... \" );             mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }     } catch ( openjava.ptree.ParseTreeException e ) {         System.err.println( \"Encountered errors during generating mutants.\" );         e.printStackTrace();     } }  =>   if (true) {     java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );     try {         mujava.op.util.Mutator mutant_op;         if (hasOperator( classOp, \"AMC\" )) {             Debug.println( \"  Applying AMC ... ... \" );             mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IOR\" )) {             Debug.println( \"  Applying IOR ... ... \" );             try {                 java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                 if (!parent_class.getName().equals( \"java.lang.Object\" )) {                     java.lang.String temp_str = parent_class.getName();                     java.lang.String result_str = \"\";                     for (int k = 0; k < temp_str.length(); k++) {                         char c = temp_str.charAt( k );                         if (c == '.') {                             result_str = result_str + \"/\";                         } else {                             result_str = result_str + c;                         }                     }                     java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                     if (f.exists()) {                         openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                         openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                         this.generateParseTree( f, parent_comp_unit, parent_file_env );                         this.initParseTree( parent_comp_unit, parent_file_env );                         mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                         ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                         comp_unit.accept( mutant_op );                     }                 }             } catch ( java.lang.ClassNotFoundException e ) {                 System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );             } catch ( java.lang.NullPointerException e1 ) {                 System.out.print( \" IOP  ^^; \" );             }         }         if (hasOperator( classOp, \"ISD\" )) {             Debug.println( \"  Applying ISD ... ... \" );             mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IOP\" )) {             Debug.println( \"  Applying IOP ... ... \" );             mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IPC\" )) {             Debug.println( \"  Applying IPC ... ... \" );             mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PNC\" )) {             Debug.println( \"  Applying PNC ... ... \" );             mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PMD\" )) {             Debug.println( \"  Applying PMD ... ... \" );             mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PPD\" )) {             Debug.println( \"  Applying PPD ... ... \" );             mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PRV\" )) {             Debug.println( \"  Applying PRV ... ... \" );             mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCI\" )) {             Debug.println( \"  Applying PCI ... ... \" );             mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCC\" )) {             Debug.println( \"  Applying PCC ... ... \" );             mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCD\" )) {             Debug.println( \"  Applying PCD ... ... \" );             mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JSD\" )) {             Debug.println( \"  Applying JSC ... ... \" );             mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JSI\" )) {             Debug.println( \"  Applying JSI ... ... \" );             mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JTD\" )) {             Debug.println( \"  Applying JTD ... ... \" );             mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JTI\" )) {             Debug.println( \"  Applying JTI ... ... \" );             mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JID\" )) {             Debug.println( \"  Applying JID ... ... \" );             mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"OAN\" )) {             Debug.println( \"  Applying OAN ... ... \" );             mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EOA\" )) {             Debug.println( \"  Applying EOA ... ... \" );             mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EOC\" )) {             Debug.println( \"  Applying EOC ... ... \" );             mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EAM\" )) {             Debug.println( \"  Applying EAM ... ... \" );             mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EMM\" )) {             Debug.println( \"  Applying EMM ... ... \" );             mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }     } catch ( openjava.ptree.ParseTreeException e ) {         System.err.println( \"Encountered errors during generating mutants.\" );         e.printStackTrace();     } }
SDL_62:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_63:222:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_64:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_65:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_66:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_67:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_68:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_69:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_70:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_71:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_72:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_73:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_74:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_75:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_76:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_77:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_78:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_79:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_80:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_81:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_82:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_83:249:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_84:119:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AMC ... ... \" ); mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_85:119:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AMC ... ... \" ); mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AMC ... ... \" ); comp_unit.accept( mutant_op );
SDL_86:119:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AMC ... ... \" ); mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AMC ... ... \" ); mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );
SDL_87:121:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"AMC\" )) {     Debug.println( \"  Applying AMC ... ... \" );     mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying AMC ... ... \" );     mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_88:151:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IOR ... ... \" ); try {     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();     if (!parent_class.getName().equals( \"java.lang.Object\" )) {         java.lang.String temp_str = parent_class.getName();         java.lang.String result_str = \"\";         for (int k = 0; k < temp_str.length(); k++) {             char c = temp_str.charAt( k );             if (c == '.') {                 result_str = result_str + \"/\";             } else {                 result_str = result_str + c;             }         }         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );         if (f.exists()) {             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];             this.generateParseTree( f, parent_comp_unit, parent_file_env );             this.initParseTree( parent_comp_unit, parent_file_env );             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );             comp_unit.accept( mutant_op );         }     } } catch ( java.lang.ClassNotFoundException e ) {     System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" ); } catch ( java.lang.NullPointerException e1 ) {     System.out.print( \" IOP  ^^; \" ); }  =>   try {     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();     if (!parent_class.getName().equals( \"java.lang.Object\" )) {         java.lang.String temp_str = parent_class.getName();         java.lang.String result_str = \"\";         for (int k = 0; k < temp_str.length(); k++) {             char c = temp_str.charAt( k );             if (c == '.') {                 result_str = result_str + \"/\";             } else {                 result_str = result_str + c;             }         }         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );         if (f.exists()) {             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];             this.generateParseTree( f, parent_comp_unit, parent_file_env );             this.initParseTree( parent_comp_unit, parent_file_env );             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );             comp_unit.accept( mutant_op );         }     } } catch ( java.lang.ClassNotFoundException e ) {     System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" ); } catch ( java.lang.NullPointerException e1 ) {     System.out.print( \" IOP  ^^; \" ); }
SDL_89:153:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"IOR\" )) {     Debug.println( \"  Applying IOR ... ... \" );     try {         java.lang.Class parent_class = Class.forName( qname ).getSuperclass();         if (!parent_class.getName().equals( \"java.lang.Object\" )) {             java.lang.String temp_str = parent_class.getName();             java.lang.String result_str = \"\";             for (int k = 0; k < temp_str.length(); k++) {                 char c = temp_str.charAt( k );                 if (c == '.') {                     result_str = result_str + \"/\";                 } else {                     result_str = result_str + c;                 }             }             java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );             if (f.exists()) {                 openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                 openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                 this.generateParseTree( f, parent_comp_unit, parent_file_env );                 this.initParseTree( parent_comp_unit, parent_file_env );                 mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                 ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                 comp_unit.accept( mutant_op );             }         }     } catch ( java.lang.ClassNotFoundException e ) {         System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );     } catch ( java.lang.NullPointerException e1 ) {         System.out.print( \" IOP  ^^; \" );     } }  =>   if (true) {     Debug.println( \"  Applying IOR ... ... \" );     try {         java.lang.Class parent_class = Class.forName( qname ).getSuperclass();         if (!parent_class.getName().equals( \"java.lang.Object\" )) {             java.lang.String temp_str = parent_class.getName();             java.lang.String result_str = \"\";             for (int k = 0; k < temp_str.length(); k++) {                 char c = temp_str.charAt( k );                 if (c == '.') {                     result_str = result_str + \"/\";                 } else {                     result_str = result_str + c;                 }             }             java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );             if (f.exists()) {                 openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                 openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                 this.generateParseTree( f, parent_comp_unit, parent_file_env );                 this.initParseTree( parent_comp_unit, parent_file_env );                 mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                 ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                 comp_unit.accept( mutant_op );             }         }     } catch ( java.lang.ClassNotFoundException e ) {         System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" );     } catch ( java.lang.NullPointerException e1 ) {         System.out.print( \" IOP  ^^; \" );     } }
SDL_90:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();     if (!parent_class.getName().equals( \"java.lang.Object\" )) {         java.lang.String temp_str = parent_class.getName();         java.lang.String result_str = \"\";         for (int k = 0; k < temp_str.length(); k++) {             char c = temp_str.charAt( k );             if (c == '.') {                 result_str = result_str + \"/\";             } else {                 result_str = result_str + c;             }         }         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );         if (f.exists()) {             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];             this.generateParseTree( f, parent_comp_unit, parent_file_env );             this.initParseTree( parent_comp_unit, parent_file_env );             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );             comp_unit.accept( mutant_op );         }     } } catch ( java.lang.ClassNotFoundException e ) {     System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" ); } catch ( java.lang.NullPointerException e1 ) {     System.out.print( \" IOP  ^^; \" ); }  =>   try {     java.lang.Class parent_class = Class.forName( qname ).getSuperclass(); } catch ( java.lang.NullPointerException e1 ) {     System.out.print( \" IOP  ^^; \" ); }
SDL_91:138:void_genClassMutants1(openjava.ptree.ClassDeclarationList): java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } } java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" ); if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }  =>   java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" ); if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }
SDL_92:137:void_genClassMutants1(openjava.ptree.ClassDeclarationList): java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } } java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" ); if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }  =>   java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } } java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );
SDL_93:147:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (!parent_class.getName().equals( \"java.lang.Object\" )) {     java.lang.String temp_str = parent_class.getName();     java.lang.String result_str = \"\";     for (int k = 0; k < temp_str.length(); k++) {         char c = temp_str.charAt( k );         if (c == '.') {             result_str = result_str + \"/\";         } else {             result_str = result_str + c;         }     }     java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );     if (f.exists()) {         openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];         openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];         this.generateParseTree( f, parent_comp_unit, parent_file_env );         this.initParseTree( parent_comp_unit, parent_file_env );         mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );         ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );         comp_unit.accept( mutant_op );     } }  =>   if (true) {     java.lang.String temp_str = parent_class.getName();     java.lang.String result_str = \"\";     for (int k = 0; k < temp_str.length(); k++) {         char c = temp_str.charAt( k );         if (c == '.') {             result_str = result_str + \"/\";         } else {             result_str = result_str + c;         }     }     java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );     if (f.exists()) {         openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];         openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];         this.generateParseTree( f, parent_comp_unit, parent_file_env );         this.initParseTree( parent_comp_unit, parent_file_env );         mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );         ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );         comp_unit.accept( mutant_op );     } }
SDL_94:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList): char c = temp_str.charAt( k ); if (c == '.') {     result_str = result_str + \"/\"; } else {     result_str = result_str + c; }  =>   char c = temp_str.charAt( k );
SDL_95:136:void_genClassMutants1(openjava.ptree.ClassDeclarationList): for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }  =>   for (int k = 0;; k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }
SDL_96:136:void_genClassMutants1(openjava.ptree.ClassDeclarationList): for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }  =>   for (int k = 0; k < temp_str.length();) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }
SDL_97:131:void_genClassMutants1(openjava.ptree.ClassDeclarationList): result_str = result_str + \"/\";  =>  
SDL_98:135:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (c == '.') {     result_str = result_str + \"/\"; } else {     result_str = result_str + c; }  =>   if (true) {     result_str = result_str + \"/\"; } else {     result_str = result_str + c; }
SDL_99:133:void_genClassMutants1(openjava.ptree.ClassDeclarationList): result_str = result_str + c;  =>  
SDL_100:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );
SDL_101:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );
SDL_102:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );
SDL_103:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_104:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );
SDL_105:146:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }  =>   if (true) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }
SDL_106:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();     if (!parent_class.getName().equals( \"java.lang.Object\" )) {         java.lang.String temp_str = parent_class.getName();         java.lang.String result_str = \"\";         for (int k = 0; k < temp_str.length(); k++) {             char c = temp_str.charAt( k );             if (c == '.') {                 result_str = result_str + \"/\";             } else {                 result_str = result_str + c;             }         }         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );         if (f.exists()) {             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];             this.generateParseTree( f, parent_comp_unit, parent_file_env );             this.initParseTree( parent_comp_unit, parent_file_env );             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );             comp_unit.accept( mutant_op );         }     } } catch ( java.lang.ClassNotFoundException e ) {     System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" ); } catch ( java.lang.NullPointerException e1 ) {     System.out.print( \" IOP  ^^; \" ); }  =>   try {     java.lang.Class parent_class = Class.forName( qname ).getSuperclass(); } catch ( java.lang.ClassNotFoundException e ) {     System.out.println( \" Exception at generating IOR mutant.  file : AllMutantsGenerator.java \" ); }
SDL_107:138:void_genClassMutants1(openjava.ptree.ClassDeclarationList): java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } } java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" ); if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }  =>   java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" ); if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }
SDL_108:137:void_genClassMutants1(openjava.ptree.ClassDeclarationList): java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } } java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" ); if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }  =>   java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } } java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );
SDL_109:147:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (!parent_class.getName().equals( \"java.lang.Object\" )) {     java.lang.String temp_str = parent_class.getName();     java.lang.String result_str = \"\";     for (int k = 0; k < temp_str.length(); k++) {         char c = temp_str.charAt( k );         if (c == '.') {             result_str = result_str + \"/\";         } else {             result_str = result_str + c;         }     }     java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );     if (f.exists()) {         openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];         openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];         this.generateParseTree( f, parent_comp_unit, parent_file_env );         this.initParseTree( parent_comp_unit, parent_file_env );         mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );         ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );         comp_unit.accept( mutant_op );     } }  =>   if (true) {     java.lang.String temp_str = parent_class.getName();     java.lang.String result_str = \"\";     for (int k = 0; k < temp_str.length(); k++) {         char c = temp_str.charAt( k );         if (c == '.') {             result_str = result_str + \"/\";         } else {             result_str = result_str + c;         }     }     java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );     if (f.exists()) {         openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];         openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];         this.generateParseTree( f, parent_comp_unit, parent_file_env );         this.initParseTree( parent_comp_unit, parent_file_env );         mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );         ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );         comp_unit.accept( mutant_op );     } }
SDL_110:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList): char c = temp_str.charAt( k ); if (c == '.') {     result_str = result_str + \"/\"; } else {     result_str = result_str + c; }  =>   char c = temp_str.charAt( k );
SDL_111:136:void_genClassMutants1(openjava.ptree.ClassDeclarationList): for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }  =>   for (int k = 0;; k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }
SDL_112:136:void_genClassMutants1(openjava.ptree.ClassDeclarationList): for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }  =>   for (int k = 0; k < temp_str.length();) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }
SDL_113:131:void_genClassMutants1(openjava.ptree.ClassDeclarationList): result_str = result_str + \"/\";  =>  
SDL_114:135:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (c == '.') {     result_str = result_str + \"/\"; } else {     result_str = result_str + c; }  =>   if (true) {     result_str = result_str + \"/\"; } else {     result_str = result_str + c; }
SDL_115:133:void_genClassMutants1(openjava.ptree.ClassDeclarationList): result_str = result_str + c;  =>  
SDL_116:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );
SDL_117:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );
SDL_118:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );
SDL_119:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_120:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );
SDL_121:146:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }  =>   if (true) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }
SDL_122:156:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ISD ... ... \" ); mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_123:156:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ISD ... ... \" ); mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying ISD ... ... \" ); comp_unit.accept( mutant_op );
SDL_124:156:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ISD ... ... \" ); mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying ISD ... ... \" ); mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );
SDL_125:158:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"ISD\" )) {     Debug.println( \"  Applying ISD ... ... \" );     mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying ISD ... ... \" );     mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_126:161:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IOP ... ... \" ); mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_127:161:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IOP ... ... \" ); mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying IOP ... ... \" ); comp_unit.accept( mutant_op );
SDL_128:161:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IOP ... ... \" ); mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying IOP ... ... \" ); mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );
SDL_129:163:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"IOP\" )) {     Debug.println( \"  Applying IOP ... ... \" );     mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying IOP ... ... \" );     mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_130:166:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IPC ... ... \" ); mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_131:166:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IPC ... ... \" ); mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying IPC ... ... \" ); comp_unit.accept( mutant_op );
SDL_132:166:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IPC ... ... \" ); mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying IPC ... ... \" ); mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );
SDL_133:168:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"IPC\" )) {     Debug.println( \"  Applying IPC ... ... \" );     mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying IPC ... ... \" );     mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_134:171:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PNC ... ... \" ); mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_135:171:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PNC ... ... \" ); mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PNC ... ... \" ); comp_unit.accept( mutant_op );
SDL_136:171:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PNC ... ... \" ); mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PNC ... ... \" ); mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );
SDL_137:173:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"PNC\" )) {     Debug.println( \"  Applying PNC ... ... \" );     mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying PNC ... ... \" );     mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_138:176:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PMD ... ... \" ); mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_139:176:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PMD ... ... \" ); mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PMD ... ... \" ); comp_unit.accept( mutant_op );
SDL_140:176:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PMD ... ... \" ); mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PMD ... ... \" ); mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );
SDL_141:178:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"PMD\" )) {     Debug.println( \"  Applying PMD ... ... \" );     mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying PMD ... ... \" );     mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_142:181:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PPD ... ... \" ); mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_143:181:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PPD ... ... \" ); mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PPD ... ... \" ); comp_unit.accept( mutant_op );
SDL_144:181:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PPD ... ... \" ); mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PPD ... ... \" ); mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );
SDL_145:183:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"PPD\" )) {     Debug.println( \"  Applying PPD ... ... \" );     mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying PPD ... ... \" );     mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_146:186:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PRV ... ... \" ); mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_147:186:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PRV ... ... \" ); mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PRV ... ... \" ); comp_unit.accept( mutant_op );
SDL_148:186:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PRV ... ... \" ); mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PRV ... ... \" ); mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );
SDL_149:188:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"PRV\" )) {     Debug.println( \"  Applying PRV ... ... \" );     mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying PRV ... ... \" );     mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_150:191:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCI ... ... \" ); mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_151:191:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCI ... ... \" ); mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PCI ... ... \" ); comp_unit.accept( mutant_op );
SDL_152:191:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCI ... ... \" ); mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PCI ... ... \" ); mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );
SDL_153:193:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"PCI\" )) {     Debug.println( \"  Applying PCI ... ... \" );     mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying PCI ... ... \" );     mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_154:196:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCC ... ... \" ); mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_155:196:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCC ... ... \" ); mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PCC ... ... \" ); comp_unit.accept( mutant_op );
SDL_156:196:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCC ... ... \" ); mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PCC ... ... \" ); mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );
SDL_157:198:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"PCC\" )) {     Debug.println( \"  Applying PCC ... ... \" );     mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying PCC ... ... \" );     mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_158:201:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCD ... ... \" ); mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_159:201:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCD ... ... \" ); mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PCD ... ... \" ); comp_unit.accept( mutant_op );
SDL_160:201:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCD ... ... \" ); mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PCD ... ... \" ); mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );
SDL_161:203:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"PCD\" )) {     Debug.println( \"  Applying PCD ... ... \" );     mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying PCD ... ... \" );     mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_162:206:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JSC ... ... \" ); mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_163:206:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JSC ... ... \" ); mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JSC ... ... \" ); comp_unit.accept( mutant_op );
SDL_164:206:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JSC ... ... \" ); mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JSC ... ... \" ); mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );
SDL_165:208:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"JSD\" )) {     Debug.println( \"  Applying JSC ... ... \" );     mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying JSC ... ... \" );     mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_166:211:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JSI ... ... \" ); mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_167:211:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JSI ... ... \" ); mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JSI ... ... \" ); comp_unit.accept( mutant_op );
SDL_168:211:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JSI ... ... \" ); mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JSI ... ... \" ); mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );
SDL_169:213:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"JSI\" )) {     Debug.println( \"  Applying JSI ... ... \" );     mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying JSI ... ... \" );     mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_170:216:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JTD ... ... \" ); mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_171:216:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JTD ... ... \" ); mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JTD ... ... \" ); comp_unit.accept( mutant_op );
SDL_172:216:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JTD ... ... \" ); mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JTD ... ... \" ); mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );
SDL_173:218:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"JTD\" )) {     Debug.println( \"  Applying JTD ... ... \" );     mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying JTD ... ... \" );     mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_174:221:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JTI ... ... \" ); mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_175:221:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JTI ... ... \" ); mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JTI ... ... \" ); comp_unit.accept( mutant_op );
SDL_176:221:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JTI ... ... \" ); mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JTI ... ... \" ); mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );
SDL_177:223:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"JTI\" )) {     Debug.println( \"  Applying JTI ... ... \" );     mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying JTI ... ... \" );     mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_178:226:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JID ... ... \" ); mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_179:226:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JID ... ... \" ); mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JID ... ... \" ); comp_unit.accept( mutant_op );
SDL_180:226:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JID ... ... \" ); mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JID ... ... \" ); mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );
SDL_181:228:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"JID\" )) {     Debug.println( \"  Applying JID ... ... \" );     mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying JID ... ... \" );     mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_182:231:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OAN ... ... \" ); mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_183:231:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OAN ... ... \" ); mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying OAN ... ... \" ); comp_unit.accept( mutant_op );
SDL_184:231:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OAN ... ... \" ); mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying OAN ... ... \" ); mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );
SDL_185:233:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"OAN\" )) {     Debug.println( \"  Applying OAN ... ... \" );     mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying OAN ... ... \" );     mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_186:236:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EOA ... ... \" ); mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_187:236:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EOA ... ... \" ); mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EOA ... ... \" ); comp_unit.accept( mutant_op );
SDL_188:236:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EOA ... ... \" ); mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EOA ... ... \" ); mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );
SDL_189:238:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"EOA\" )) {     Debug.println( \"  Applying EOA ... ... \" );     mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying EOA ... ... \" );     mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_190:241:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EOC ... ... \" ); mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_191:241:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EOC ... ... \" ); mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EOC ... ... \" ); comp_unit.accept( mutant_op );
SDL_192:241:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EOC ... ... \" ); mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EOC ... ... \" ); mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );
SDL_193:243:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"EOC\" )) {     Debug.println( \"  Applying EOC ... ... \" );     mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying EOC ... ... \" );     mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_194:246:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EAM ... ... \" ); mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_195:246:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EAM ... ... \" ); mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EAM ... ... \" ); comp_unit.accept( mutant_op );
SDL_196:246:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EAM ... ... \" ); mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EAM ... ... \" ); mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );
SDL_197:248:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"EAM\" )) {     Debug.println( \"  Applying EAM ... ... \" );     mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying EAM ... ... \" );     mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_198:251:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EMM ... ... \" ); mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_199:251:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EMM ... ... \" ); mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EMM ... ... \" ); comp_unit.accept( mutant_op );
SDL_200:251:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EMM ... ... \" ); mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EMM ... ... \" ); mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );
SDL_201:253:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"EMM\" )) {     Debug.println( \"  Applying EMM ... ... \" );     mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying EMM ... ... \" );     mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_202:263:void_compileMutants(): if (classOp != null && classOp.length > 0) {     Debug.println( \"* Compiling class mutants into bytecode\" );     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     super.compileMutants(); }  =>  
SDL_203:266:void_compileMutants(): Debug.println( \"* Compiling class mutants into bytecode\" ); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; super.compileMutants();  =>   MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; super.compileMutants();
SDL_204:266:void_compileMutants(): Debug.println( \"* Compiling class mutants into bytecode\" ); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; super.compileMutants();  =>   Debug.println( \"* Compiling class mutants into bytecode\" ); super.compileMutants();
SDL_205:266:void_compileMutants(): Debug.println( \"* Compiling class mutants into bytecode\" ); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; super.compileMutants();  =>   Debug.println( \"* Compiling class mutants into bytecode\" ); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;
SDL_206:268:void_compileMutants(): if (classOp != null && classOp.length > 0) {     Debug.println( \"* Compiling class mutants into bytecode\" );     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     super.compileMutants(); }  =>   if (true) {     Debug.println( \"* Compiling class mutants into bytecode\" );     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     super.compileMutants(); }
VDL_1:42:void_genMutants():comp_unit == null => null
VDL_2:43:void_genMutants():original_file + " is skipped." => " is skipped."
VDL_3:46:void_genMutants():cdecls == null => null
VDL_4:49:void_genMutants():classOp != null => null
VDL_5:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j < cdecls.size() => cdecls.size()
VDL_6:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList):++j =>  
VDL_7:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j < cdecls.size() => cdecls.size()
VDL_8:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList):++j =>  
VDL_9:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k < temp_str.length() => temp_str.length()
VDL_10:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k++ =>  
VDL_11:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c == '.' => '.'
VDL_12:131:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + "/" => "/"
VDL_13:133:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + c => c
VDL_14:133:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + c => result_str
VDL_15:136:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + ".java" => ".java"
VDL_16:263:void_compileMutants():classOp != null => null
ODL_1:42:void_genMutants():comp_unit == null => comp_unit
ODL_2:42:void_genMutants():comp_unit == null => null
ODL_3:43:void_genMutants():original_file + " is skipped." => original_file
ODL_4:43:void_genMutants():original_file + " is skipped." => " is skipped."
ODL_5:46:void_genMutants():cdecls == null => cdecls
ODL_6:46:void_genMutants():cdecls == null => null
ODL_7:46:void_genMutants():cdecls.size() == 0 => cdecls.size()
ODL_8:46:void_genMutants():cdecls.size() == 0 => 0
ODL_9:46:void_genMutants():cdecls == null || cdecls.size() == 0 => cdecls == null
ODL_10:46:void_genMutants():cdecls == null || cdecls.size() == 0 => cdecls.size() == 0
ODL_11:49:void_genMutants():classOp != null => classOp
ODL_12:49:void_genMutants():classOp != null => null
ODL_13:49:void_genMutants():classOp.length > 0 => classOp.length
ODL_14:49:void_genMutants():classOp.length > 0 => 0
ODL_15:49:void_genMutants():classOp != null && classOp.length > 0 => classOp != null
ODL_16:49:void_genMutants():classOp != null && classOp.length > 0 => classOp.length > 0
ODL_17:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j < cdecls.size() => j
ODL_18:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j < cdecls.size() => cdecls.size()
ODL_19:67:void_genClassMutants2(openjava.ptree.ClassDeclarationList):++j => j
ODL_20:75:void_genClassMutants2(openjava.ptree.ClassDeclarationList):((mujava.op.IHD) mutant_op).getTotal() > 0 => ((mujava.op.IHD) mutant_op).getTotal()
ODL_21:75:void_genClassMutants2(openjava.ptree.ClassDeclarationList):((mujava.op.IHD) mutant_op).getTotal() > 0 => 0
ODL_22:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j < cdecls.size() => j
ODL_23:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j < cdecls.size() => cdecls.size()
ODL_24:110:void_genClassMutants1(openjava.ptree.ClassDeclarationList):++j => j
ODL_25:125:void_genClassMutants1(openjava.ptree.ClassDeclarationList):!parent_class.getName().equals( "java.lang.Object" ) => parent_class.getName().equals( "java.lang.Object" )
ODL_26:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k < temp_str.length() => k
ODL_27:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k < temp_str.length() => temp_str.length()
ODL_28:128:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k++ => k
ODL_29:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c == '.' => c
ODL_30:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c == '.' => '.'
ODL_31:131:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + "/" => result_str
ODL_32:131:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + "/" => "/"
ODL_33:133:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + c => result_str
ODL_34:133:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + c => c
ODL_35:136:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + ".java" => result_str
ODL_36:136:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + ".java" => ".java"
ODL_37:263:void_compileMutants():classOp != null => classOp
ODL_38:263:void_compileMutants():classOp != null => null
ODL_39:263:void_compileMutants():classOp.length > 0 => classOp.length
ODL_40:263:void_compileMutants():classOp.length > 0 => 0
ODL_41:263:void_compileMutants():classOp != null && classOp.length > 0 => classOp != null
ODL_42:263:void_compileMutants():classOp != null && classOp.length > 0 => classOp.length > 0
CDL_1:42:void_genMutants():comp_unit == null => comp_unit
CDL_2:43:void_genMutants():original_file + " is skipped." => original_file
CDL_3:46:void_genMutants():cdecls == null => cdecls
CDL_4:46:void_genMutants():cdecls.size() == 0 => cdecls.size()
CDL_5:49:void_genMutants():classOp != null => classOp
CDL_6:49:void_genMutants():classOp.length > 0 => classOp.length
CDL_7:75:void_genClassMutants2(openjava.ptree.ClassDeclarationList):((mujava.op.IHD) mutant_op).getTotal() > 0 => ((mujava.op.IHD) mutant_op).getTotal()
CDL_8:130:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c == '.' => c
CDL_9:131:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + "/" => result_str
CDL_10:136:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + ".java" => result_str
CDL_11:263:void_compileMutants():classOp != null => classOp
CDL_12:263:void_compileMutants():classOp.length > 0 => classOp.length
