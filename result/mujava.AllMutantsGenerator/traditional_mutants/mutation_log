AORS_1:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList):++j => j--
AORS_2:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList):++j => j--
AORS_3:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k++ => k--
AORS_4:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):++j => j--
AOIU_1:82:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => -j
AOIU_2:125:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => -j
AOIU_3:143:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => -k
AOIU_4:292:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):j => -j
AOIS_1:55:void_genMutants():traditionalOp.length => ++traditionalOp.length
AOIS_2:55:void_genMutants():traditionalOp.length => --traditionalOp.length
AOIS_3:55:void_genMutants():traditionalOp.length => traditionalOp.length++
AOIS_4:55:void_genMutants():traditionalOp.length => traditionalOp.length--
AOIS_5:63:void_genMutants():classOp.length => ++classOp.length
AOIS_6:63:void_genMutants():classOp.length => --classOp.length
AOIS_7:63:void_genMutants():classOp.length => classOp.length++
AOIS_8:63:void_genMutants():classOp.length => classOp.length--
AOIS_9:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => ++j
AOIS_10:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => --j
AOIS_11:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => j++
AOIS_12:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => j--
AOIS_13:82:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => j++
AOIS_14:82:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => j--
AOIS_15:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => ++j
AOIS_16:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => --j
AOIS_17:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => j++
AOIS_18:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => j--
AOIS_19:125:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => j++
AOIS_20:125:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => j--
AOIS_21:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => ++k
AOIS_22:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => --k
AOIS_23:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => k++
AOIS_24:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => k--
AOIS_25:143:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => k++
AOIS_26:143:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => k--
AOIS_27:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => ++c
AOIS_28:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => --c
AOIS_29:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => c++
AOIS_30:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => c--
AOIS_31:147:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => ++c
AOIS_32:147:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => --c
AOIS_33:147:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => c++
AOIS_34:147:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => c--
AOIS_35:277:void_compileMutants():traditionalOp.length => ++traditionalOp.length
AOIS_36:277:void_compileMutants():traditionalOp.length => --traditionalOp.length
AOIS_37:277:void_compileMutants():traditionalOp.length => traditionalOp.length++
AOIS_38:277:void_compileMutants():traditionalOp.length => traditionalOp.length--
AOIS_39:282:void_compileMutants():classOp.length => ++classOp.length
AOIS_40:282:void_compileMutants():classOp.length => --classOp.length
AOIS_41:282:void_compileMutants():classOp.length => classOp.length++
AOIS_42:282:void_compileMutants():classOp.length => classOp.length--
AOIS_43:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):j => ++j
AOIS_44:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):j => --j
AOIS_45:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):j => j++
AOIS_46:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):j => j--
AOIS_47:292:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):j => j++
AOIS_48:292:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):j => j--
ROR_1:48:void_genMutants(): comp_unit == null  =>   comp_unit != null
ROR_2:52:void_genMutants(): cdecls == null  =>   cdecls != null
ROR_3:52:void_genMutants(): cdecls.size() == 0  =>   cdecls.size() > 0
ROR_4:52:void_genMutants(): cdecls.size() == 0  =>   cdecls.size() >= 0
ROR_5:52:void_genMutants(): cdecls.size() == 0  =>   cdecls.size() < 0
ROR_6:52:void_genMutants(): cdecls.size() == 0  =>   cdecls.size() <= 0
ROR_7:52:void_genMutants(): cdecls.size() == 0  =>   cdecls.size() != 0
ROR_8:52:void_genMutants(): cdecls.size() == 0  =>   true
ROR_9:52:void_genMutants(): cdecls.size() == 0  =>   false
ROR_10:55:void_genMutants(): traditionalOp != null  =>   traditionalOp == null
ROR_11:55:void_genMutants(): traditionalOp.length > 0  =>   traditionalOp.length >= 0
ROR_12:55:void_genMutants(): traditionalOp.length > 0  =>   traditionalOp.length < 0
ROR_13:55:void_genMutants(): traditionalOp.length > 0  =>   traditionalOp.length <= 0
ROR_14:55:void_genMutants(): traditionalOp.length > 0  =>   traditionalOp.length == 0
ROR_15:55:void_genMutants(): traditionalOp.length > 0  =>   traditionalOp.length != 0
ROR_16:55:void_genMutants(): traditionalOp.length > 0  =>   true
ROR_17:55:void_genMutants(): traditionalOp.length > 0  =>   false
ROR_18:63:void_genMutants(): classOp != null  =>   classOp == null
ROR_19:63:void_genMutants(): classOp.length > 0  =>   classOp.length >= 0
ROR_20:63:void_genMutants(): classOp.length > 0  =>   classOp.length < 0
ROR_21:63:void_genMutants(): classOp.length > 0  =>   classOp.length <= 0
ROR_22:63:void_genMutants(): classOp.length > 0  =>   classOp.length == 0
ROR_23:63:void_genMutants(): classOp.length > 0  =>   classOp.length != 0
ROR_24:63:void_genMutants(): classOp.length > 0  =>   true
ROR_25:63:void_genMutants(): classOp.length > 0  =>   false
ROR_26:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j > cdecls.size()
ROR_27:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j >= cdecls.size()
ROR_28:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j <= cdecls.size()
ROR_29:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j == cdecls.size()
ROR_30:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j != cdecls.size()
ROR_31:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   true
ROR_32:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   false
ROR_33:89:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>   ((mujava.op.IHD) mutant_op).getTotal() >= 0
ROR_34:89:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>   ((mujava.op.IHD) mutant_op).getTotal() < 0
ROR_35:89:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>   ((mujava.op.IHD) mutant_op).getTotal() <= 0
ROR_36:89:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>   ((mujava.op.IHD) mutant_op).getTotal() == 0
ROR_37:89:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>   ((mujava.op.IHD) mutant_op).getTotal() != 0
ROR_38:89:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>   true
ROR_39:89:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>   false
ROR_40:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j > cdecls.size()
ROR_41:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j >= cdecls.size()
ROR_42:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j <= cdecls.size()
ROR_43:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j == cdecls.size()
ROR_44:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j != cdecls.size()
ROR_45:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   true
ROR_46:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   false
ROR_47:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>   k > temp_str.length()
ROR_48:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>   k >= temp_str.length()
ROR_49:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>   k <= temp_str.length()
ROR_50:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>   k == temp_str.length()
ROR_51:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>   k != temp_str.length()
ROR_52:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>   true
ROR_53:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>   false
ROR_54:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>   c > '.'
ROR_55:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>   c >= '.'
ROR_56:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>   c < '.'
ROR_57:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>   c <= '.'
ROR_58:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>   c != '.'
ROR_59:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>   true
ROR_60:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>   false
ROR_61:277:void_compileMutants(): traditionalOp != null  =>   traditionalOp == null
ROR_62:277:void_compileMutants(): traditionalOp.length > 0  =>   traditionalOp.length >= 0
ROR_63:277:void_compileMutants(): traditionalOp.length > 0  =>   traditionalOp.length < 0
ROR_64:277:void_compileMutants(): traditionalOp.length > 0  =>   traditionalOp.length <= 0
ROR_65:277:void_compileMutants(): traditionalOp.length > 0  =>   traditionalOp.length == 0
ROR_66:277:void_compileMutants(): traditionalOp.length > 0  =>   traditionalOp.length != 0
ROR_67:277:void_compileMutants(): traditionalOp.length > 0  =>   true
ROR_68:277:void_compileMutants(): traditionalOp.length > 0  =>   false
ROR_69:282:void_compileMutants(): classOp != null  =>   classOp == null
ROR_70:282:void_compileMutants(): classOp.length > 0  =>   classOp.length >= 0
ROR_71:282:void_compileMutants(): classOp.length > 0  =>   classOp.length < 0
ROR_72:282:void_compileMutants(): classOp.length > 0  =>   classOp.length <= 0
ROR_73:282:void_compileMutants(): classOp.length > 0  =>   classOp.length == 0
ROR_74:282:void_compileMutants(): classOp.length > 0  =>   classOp.length != 0
ROR_75:282:void_compileMutants(): classOp.length > 0  =>   true
ROR_76:282:void_compileMutants(): classOp.length > 0  =>   false
ROR_77:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j > cdecls.size()
ROR_78:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j >= cdecls.size()
ROR_79:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j <= cdecls.size()
ROR_80:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j == cdecls.size()
ROR_81:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   j != cdecls.size()
ROR_82:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   true
ROR_83:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>   false
COR_1:52:void_genMutants(): cdecls == null || cdecls.size() == 0  =>   cdecls == null && cdecls.size() == 0
COR_2:52:void_genMutants(): cdecls == null || cdecls.size() == 0  =>   cdecls == null ^ cdecls.size() == 0
COR_3:55:void_genMutants(): traditionalOp != null && traditionalOp.length > 0  =>   traditionalOp != null || traditionalOp.length > 0
COR_4:55:void_genMutants(): traditionalOp != null && traditionalOp.length > 0  =>   traditionalOp != null ^ traditionalOp.length > 0
COR_5:63:void_genMutants(): classOp != null && classOp.length > 0  =>   classOp != null || classOp.length > 0
COR_6:63:void_genMutants(): classOp != null && classOp.length > 0  =>   classOp != null ^ classOp.length > 0
COR_7:277:void_compileMutants(): traditionalOp != null && traditionalOp.length > 0  =>   traditionalOp != null || traditionalOp.length > 0
COR_8:277:void_compileMutants(): traditionalOp != null && traditionalOp.length > 0  =>   traditionalOp != null ^ traditionalOp.length > 0
COR_9:282:void_compileMutants(): classOp != null && classOp.length > 0  =>   classOp != null || classOp.length > 0
COR_10:282:void_compileMutants(): classOp != null && classOp.length > 0  =>   classOp != null ^ classOp.length > 0
COD_1:139:void_genClassMutants1(openjava.ptree.ClassDeclarationList):!parent_class.getName().equals( "java.lang.Object" ) => parent_class.getName().equals( "java.lang.Object" )
COI_1:34:AllMutantsGenerator(java.io.File,boolean): debug  =>  !debug
COI_2:48:void_genMutants(): comp_unit == null  =>  !(comp_unit == null)
COI_3:52:void_genMutants(): cdecls == null  =>  !(cdecls == null)
COI_4:52:void_genMutants(): cdecls.size() == 0  =>  !(cdecls.size() == 0)
COI_5:52:void_genMutants(): cdecls == null || cdecls.size() == 0  =>  !(cdecls == null || cdecls.size() == 0)
COI_6:55:void_genMutants(): traditionalOp != null  =>  !(traditionalOp != null)
COI_7:55:void_genMutants(): traditionalOp.length > 0  =>  !(traditionalOp.length > 0)
COI_8:55:void_genMutants(): traditionalOp != null && traditionalOp.length > 0  =>  !(traditionalOp != null && traditionalOp.length > 0)
COI_9:63:void_genMutants(): classOp != null  =>  !(classOp != null)
COI_10:63:void_genMutants(): classOp.length > 0  =>  !(classOp.length > 0)
COI_11:63:void_genMutants(): classOp != null && classOp.length > 0  =>  !(classOp != null && classOp.length > 0)
COI_12:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>  !(j < cdecls.size())
COI_13:89:void_genClassMutants2(openjava.ptree.ClassDeclarationList): ((mujava.op.IHD) mutant_op).getTotal() > 0  =>  !(((mujava.op.IHD) mutant_op).getTotal() > 0)
COI_14:90:void_genClassMutants2(openjava.ptree.ClassDeclarationList): existIHD  =>  !existIHD
COI_15:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>  !(j < cdecls.size())
COI_16:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList): k < temp_str.length()  =>  !(k < temp_str.length())
COI_17:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): c == '.'  =>  !(c == '.')
COI_18:277:void_compileMutants(): traditionalOp != null  =>  !(traditionalOp != null)
COI_19:277:void_compileMutants(): traditionalOp.length > 0  =>  !(traditionalOp.length > 0)
COI_20:277:void_compileMutants(): traditionalOp != null && traditionalOp.length > 0  =>  !(traditionalOp != null && traditionalOp.length > 0)
COI_21:282:void_compileMutants(): classOp != null  =>  !(classOp != null)
COI_22:282:void_compileMutants(): classOp.length > 0  =>  !(classOp.length > 0)
COI_23:282:void_compileMutants(): classOp != null && classOp.length > 0  =>  !(classOp != null && classOp.length > 0)
COI_24:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): j < cdecls.size()  =>  !(j < cdecls.size())
COI_25:299:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): AOR_FLAG  =>  !AOR_FLAG
COI_26:305:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): AOR_FLAG  =>  !AOR_FLAG
COI_27:312:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): AOR_FLAG  =>  !AOR_FLAG
COI_28:323:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): AOR_FLAG  =>  !AOR_FLAG
LOI_1:55:void_genMutants():traditionalOp.length => ~traditionalOp.length
LOI_2:63:void_genMutants():classOp.length => ~classOp.length
LOI_3:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => ~j
LOI_4:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => ~j
LOI_5:82:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j => ~j
LOI_6:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => ~j
LOI_7:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => ~j
LOI_8:125:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j => ~j
LOI_9:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => ~k
LOI_10:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => ~k
LOI_11:143:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k => ~k
LOI_12:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => ~c
LOI_13:147:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c => ~c
LOI_14:277:void_compileMutants():traditionalOp.length => ~traditionalOp.length
LOI_15:282:void_compileMutants():classOp.length => ~classOp.length
LOI_16:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):j => ~j
LOI_17:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):j => ~j
LOI_18:292:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):j => ~j
SDL_1:29:AllMutantsGenerator(java.io.File): classOp = MutationSystem.cm_operators; traditionalOp = MutationSystem.tm_operators;  =>   traditionalOp = MutationSystem.tm_operators;
SDL_2:29:AllMutantsGenerator(java.io.File): classOp = MutationSystem.cm_operators; traditionalOp = MutationSystem.tm_operators;  =>   classOp = MutationSystem.cm_operators;
SDL_3:36:AllMutantsGenerator(java.io.File,boolean): classOp = MutationSystem.cm_operators; traditionalOp = MutationSystem.tm_operators;  =>   traditionalOp = MutationSystem.tm_operators;
SDL_4:36:AllMutantsGenerator(java.io.File,boolean): classOp = MutationSystem.cm_operators; traditionalOp = MutationSystem.tm_operators;  =>   classOp = MutationSystem.cm_operators;
SDL_5:43:AllMutantsGenerator(java.io.File,java.lang.String[],java.lang.String[]): classOp = cOP; traditionalOp = tOP;  =>   traditionalOp = tOP;
SDL_6:43:AllMutantsGenerator(java.io.File,java.lang.String[],java.lang.String[]): classOp = cOP; traditionalOp = tOP;  =>   classOp = cOP;
SDL_7:68:void_genMutants(): if (comp_unit == null) {     System.err.println( original_file + \" is skipped.\" ); } openjava.ptree.ClassDeclarationList cdecls = comp_unit.getClassDeclarations(); if (cdecls == null || cdecls.size() == 0) {     return; } if (traditionalOp != null && traditionalOp.length > 0) {     Debug.println( \"* Generating traditional mutants\" );     MutationSystem.clearPreviousTraditionalMutants();     MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;     CodeChangeLog.openLogFile();     genTraditionalMutants( cdecls );     CodeChangeLog.closeLogFile(); } if (classOp != null && classOp.length > 0) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }  =>   openjava.ptree.ClassDeclarationList cdecls = comp_unit.getClassDeclarations(); if (cdecls == null || cdecls.size() == 0) {     return; } if (traditionalOp != null && traditionalOp.length > 0) {     Debug.println( \"* Generating traditional mutants\" );     MutationSystem.clearPreviousTraditionalMutants();     MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;     CodeChangeLog.openLogFile();     genTraditionalMutants( cdecls );     CodeChangeLog.closeLogFile(); } if (classOp != null && classOp.length > 0) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }
SDL_8:68:void_genMutants(): if (comp_unit == null) {     System.err.println( original_file + \" is skipped.\" ); } openjava.ptree.ClassDeclarationList cdecls = comp_unit.getClassDeclarations(); if (cdecls == null || cdecls.size() == 0) {     return; } if (traditionalOp != null && traditionalOp.length > 0) {     Debug.println( \"* Generating traditional mutants\" );     MutationSystem.clearPreviousTraditionalMutants();     MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;     CodeChangeLog.openLogFile();     genTraditionalMutants( cdecls );     CodeChangeLog.closeLogFile(); } if (classOp != null && classOp.length > 0) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }  =>   if (comp_unit == null) {     System.err.println( original_file + \" is skipped.\" ); } openjava.ptree.ClassDeclarationList cdecls = comp_unit.getClassDeclarations(); if (traditionalOp != null && traditionalOp.length > 0) {     Debug.println( \"* Generating traditional mutants\" );     MutationSystem.clearPreviousTraditionalMutants();     MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;     CodeChangeLog.openLogFile();     genTraditionalMutants( cdecls );     CodeChangeLog.closeLogFile(); } if (classOp != null && classOp.length > 0) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }
SDL_9:63:void_genMutants(): if (comp_unit == null) {     System.err.println( original_file + \" is skipped.\" ); } openjava.ptree.ClassDeclarationList cdecls = comp_unit.getClassDeclarations(); if (cdecls == null || cdecls.size() == 0) {     return; } if (traditionalOp != null && traditionalOp.length > 0) {     Debug.println( \"* Generating traditional mutants\" );     MutationSystem.clearPreviousTraditionalMutants();     MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;     CodeChangeLog.openLogFile();     genTraditionalMutants( cdecls );     CodeChangeLog.closeLogFile(); } if (classOp != null && classOp.length > 0) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }  =>   if (comp_unit == null) {     System.err.println( original_file + \" is skipped.\" ); } openjava.ptree.ClassDeclarationList cdecls = comp_unit.getClassDeclarations(); if (cdecls == null || cdecls.size() == 0) {     return; } if (classOp != null && classOp.length > 0) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }
SDL_10:63:void_genMutants(): if (comp_unit == null) {     System.err.println( original_file + \" is skipped.\" ); } openjava.ptree.ClassDeclarationList cdecls = comp_unit.getClassDeclarations(); if (cdecls == null || cdecls.size() == 0) {     return; } if (traditionalOp != null && traditionalOp.length > 0) {     Debug.println( \"* Generating traditional mutants\" );     MutationSystem.clearPreviousTraditionalMutants();     MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;     CodeChangeLog.openLogFile();     genTraditionalMutants( cdecls );     CodeChangeLog.closeLogFile(); } if (classOp != null && classOp.length > 0) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }  =>   if (comp_unit == null) {     System.err.println( original_file + \" is skipped.\" ); } openjava.ptree.ClassDeclarationList cdecls = comp_unit.getClassDeclarations(); if (cdecls == null || cdecls.size() == 0) {     return; } if (traditionalOp != null && traditionalOp.length > 0) {     Debug.println( \"* Generating traditional mutants\" );     MutationSystem.clearPreviousTraditionalMutants();     MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;     CodeChangeLog.openLogFile();     genTraditionalMutants( cdecls );     CodeChangeLog.closeLogFile(); }
SDL_11:49:void_genMutants(): System.err.println( original_file + \" is skipped.\" );  =>  
SDL_12:51:void_genMutants(): if (comp_unit == null) {     System.err.println( original_file + \" is skipped.\" ); }  =>   if (true) {     System.err.println( original_file + \" is skipped.\" ); }
SDL_13:55:void_genMutants(): if (cdecls == null || cdecls.size() == 0) {     return; }  =>   if (true) {     return; }
SDL_14:61:void_genMutants(): Debug.println( \"* Generating traditional mutants\" ); MutationSystem.clearPreviousTraditionalMutants(); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; CodeChangeLog.openLogFile(); genTraditionalMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   MutationSystem.clearPreviousTraditionalMutants(); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; CodeChangeLog.openLogFile(); genTraditionalMutants( cdecls ); CodeChangeLog.closeLogFile();
SDL_15:61:void_genMutants(): Debug.println( \"* Generating traditional mutants\" ); MutationSystem.clearPreviousTraditionalMutants(); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; CodeChangeLog.openLogFile(); genTraditionalMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating traditional mutants\" ); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; CodeChangeLog.openLogFile(); genTraditionalMutants( cdecls ); CodeChangeLog.closeLogFile();
SDL_16:61:void_genMutants(): Debug.println( \"* Generating traditional mutants\" ); MutationSystem.clearPreviousTraditionalMutants(); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; CodeChangeLog.openLogFile(); genTraditionalMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating traditional mutants\" ); MutationSystem.clearPreviousTraditionalMutants(); CodeChangeLog.openLogFile(); genTraditionalMutants( cdecls ); CodeChangeLog.closeLogFile();
SDL_17:61:void_genMutants(): Debug.println( \"* Generating traditional mutants\" ); MutationSystem.clearPreviousTraditionalMutants(); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; CodeChangeLog.openLogFile(); genTraditionalMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating traditional mutants\" ); MutationSystem.clearPreviousTraditionalMutants(); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; genTraditionalMutants( cdecls ); CodeChangeLog.closeLogFile();
SDL_18:61:void_genMutants(): Debug.println( \"* Generating traditional mutants\" ); MutationSystem.clearPreviousTraditionalMutants(); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; CodeChangeLog.openLogFile(); genTraditionalMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating traditional mutants\" ); MutationSystem.clearPreviousTraditionalMutants(); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; CodeChangeLog.openLogFile(); CodeChangeLog.closeLogFile();
SDL_19:61:void_genMutants(): Debug.println( \"* Generating traditional mutants\" ); MutationSystem.clearPreviousTraditionalMutants(); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; CodeChangeLog.openLogFile(); genTraditionalMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating traditional mutants\" ); MutationSystem.clearPreviousTraditionalMutants(); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; CodeChangeLog.openLogFile(); genTraditionalMutants( cdecls );
SDL_20:63:void_genMutants(): if (traditionalOp != null && traditionalOp.length > 0) {     Debug.println( \"* Generating traditional mutants\" );     MutationSystem.clearPreviousTraditionalMutants();     MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;     CodeChangeLog.openLogFile();     genTraditionalMutants( cdecls );     CodeChangeLog.closeLogFile(); }  =>   if (true) {     Debug.println( \"* Generating traditional mutants\" );     MutationSystem.clearPreviousTraditionalMutants();     MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;     CodeChangeLog.openLogFile();     genTraditionalMutants( cdecls );     CodeChangeLog.closeLogFile(); }
SDL_21:69:void_genMutants(): Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();
SDL_22:69:void_genMutants(): Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating class mutants\" ); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();
SDL_23:69:void_genMutants(): Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();
SDL_24:69:void_genMutants(): Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; genClassMutants( cdecls ); CodeChangeLog.closeLogFile();
SDL_25:69:void_genMutants(): Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); CodeChangeLog.closeLogFile();
SDL_26:69:void_genMutants(): Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls ); CodeChangeLog.closeLogFile();  =>   Debug.println( \"* Generating class mutants\" ); MutationSystem.clearPreviousClassMutants(); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; CodeChangeLog.openLogFile(); genClassMutants( cdecls );
SDL_27:71:void_genMutants(): if (classOp != null && classOp.length > 0) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }  =>   if (true) {     Debug.println( \"* Generating class mutants\" );     MutationSystem.clearPreviousClassMutants();     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     CodeChangeLog.openLogFile();     genClassMutants( cdecls );     CodeChangeLog.closeLogFile(); }
SDL_28:76:void_genClassMutants(openjava.ptree.ClassDeclarationList): genClassMutants1( cdecls ); genClassMutants2( cdecls );  =>   genClassMutants2( cdecls );
SDL_29:76:void_genClassMutants(openjava.ptree.ClassDeclarationList): genClassMutants1( cdecls ); genClassMutants2( cdecls );  =>   genClassMutants1( cdecls );
SDL_30:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         mujava.op.util.DeclAnalyzer mutant_op;         if (hasOperator( classOp, \"IHD\" )) {             Debug.println( \"  Applying IHD ... ... \" );             mutant_op = new mujava.op.IHD( file_env, null, cdecl );             generateMutant( mutant_op );             if (((mujava.op.IHD) mutant_op).getTotal() > 0) {                 existIHD = true;             }         }         if (hasOperator( classOp, \"IHI\" )) {             Debug.println( \"  Applying IHI ... ... \" );             mutant_op = new mujava.op.IHI( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"IOD\" )) {             Debug.println( \"  Applying IOD ... ... \" );             mutant_op = new mujava.op.IOD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMR\" )) {             Debug.println( \"  Applying OMR ... ... \" );             mutant_op = new mujava.op.OMR( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMD\" )) {             Debug.println( \"  Applying OMD ... ... \" );             mutant_op = new mujava.op.OMD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"JDC\" )) {             Debug.println( \"  Applying JDC ... ... \" );             mutant_op = new mujava.op.JDC( file_env, null, cdecl );             generateMutant( mutant_op );         }     } }  =>  
SDL_31:83:void_genClassMutants2(openjava.ptree.ClassDeclarationList): openjava.ptree.ClassDeclaration cdecl = cdecls.get( j ); if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {     mujava.op.util.DeclAnalyzer mutant_op;     if (hasOperator( classOp, \"IHD\" )) {         Debug.println( \"  Applying IHD ... ... \" );         mutant_op = new mujava.op.IHD( file_env, null, cdecl );         generateMutant( mutant_op );         if (((mujava.op.IHD) mutant_op).getTotal() > 0) {             existIHD = true;         }     }     if (hasOperator( classOp, \"IHI\" )) {         Debug.println( \"  Applying IHI ... ... \" );         mutant_op = new mujava.op.IHI( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"IOD\" )) {         Debug.println( \"  Applying IOD ... ... \" );         mutant_op = new mujava.op.IOD( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"OMR\" )) {         Debug.println( \"  Applying OMR ... ... \" );         mutant_op = new mujava.op.OMR( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"OMD\" )) {         Debug.println( \"  Applying OMD ... ... \" );         mutant_op = new mujava.op.OMD( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"JDC\" )) {         Debug.println( \"  Applying JDC ... ... \" );         mutant_op = new mujava.op.JDC( file_env, null, cdecl );         generateMutant( mutant_op );     } }  =>   openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );
SDL_32:120:void_genClassMutants2(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         mujava.op.util.DeclAnalyzer mutant_op;         if (hasOperator( classOp, \"IHD\" )) {             Debug.println( \"  Applying IHD ... ... \" );             mutant_op = new mujava.op.IHD( file_env, null, cdecl );             generateMutant( mutant_op );             if (((mujava.op.IHD) mutant_op).getTotal() > 0) {                 existIHD = true;             }         }         if (hasOperator( classOp, \"IHI\" )) {             Debug.println( \"  Applying IHI ... ... \" );             mutant_op = new mujava.op.IHI( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"IOD\" )) {             Debug.println( \"  Applying IOD ... ... \" );             mutant_op = new mujava.op.IOD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMR\" )) {             Debug.println( \"  Applying OMR ... ... \" );             mutant_op = new mujava.op.OMR( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMD\" )) {             Debug.println( \"  Applying OMD ... ... \" );             mutant_op = new mujava.op.OMD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"JDC\" )) {             Debug.println( \"  Applying JDC ... ... \" );             mutant_op = new mujava.op.JDC( file_env, null, cdecl );             generateMutant( mutant_op );         }     } }  =>   for (int j = 0;; ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         mujava.op.util.DeclAnalyzer mutant_op;         if (hasOperator( classOp, \"IHD\" )) {             Debug.println( \"  Applying IHD ... ... \" );             mutant_op = new mujava.op.IHD( file_env, null, cdecl );             generateMutant( mutant_op );             if (((mujava.op.IHD) mutant_op).getTotal() > 0) {                 existIHD = true;             }         }         if (hasOperator( classOp, \"IHI\" )) {             Debug.println( \"  Applying IHI ... ... \" );             mutant_op = new mujava.op.IHI( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"IOD\" )) {             Debug.println( \"  Applying IOD ... ... \" );             mutant_op = new mujava.op.IOD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMR\" )) {             Debug.println( \"  Applying OMR ... ... \" );             mutant_op = new mujava.op.OMR( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMD\" )) {             Debug.println( \"  Applying OMD ... ... \" );             mutant_op = new mujava.op.OMD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"JDC\" )) {             Debug.println( \"  Applying JDC ... ... \" );             mutant_op = new mujava.op.JDC( file_env, null, cdecl );             generateMutant( mutant_op );         }     } }
SDL_33:120:void_genClassMutants2(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         mujava.op.util.DeclAnalyzer mutant_op;         if (hasOperator( classOp, \"IHD\" )) {             Debug.println( \"  Applying IHD ... ... \" );             mutant_op = new mujava.op.IHD( file_env, null, cdecl );             generateMutant( mutant_op );             if (((mujava.op.IHD) mutant_op).getTotal() > 0) {                 existIHD = true;             }         }         if (hasOperator( classOp, \"IHI\" )) {             Debug.println( \"  Applying IHI ... ... \" );             mutant_op = new mujava.op.IHI( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"IOD\" )) {             Debug.println( \"  Applying IOD ... ... \" );             mutant_op = new mujava.op.IOD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMR\" )) {             Debug.println( \"  Applying OMR ... ... \" );             mutant_op = new mujava.op.OMR( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMD\" )) {             Debug.println( \"  Applying OMD ... ... \" );             mutant_op = new mujava.op.OMD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"JDC\" )) {             Debug.println( \"  Applying JDC ... ... \" );             mutant_op = new mujava.op.JDC( file_env, null, cdecl );             generateMutant( mutant_op );         }     } }  =>   for (int j = 0; j < cdecls.size();) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         mujava.op.util.DeclAnalyzer mutant_op;         if (hasOperator( classOp, \"IHD\" )) {             Debug.println( \"  Applying IHD ... ... \" );             mutant_op = new mujava.op.IHD( file_env, null, cdecl );             generateMutant( mutant_op );             if (((mujava.op.IHD) mutant_op).getTotal() > 0) {                 existIHD = true;             }         }         if (hasOperator( classOp, \"IHI\" )) {             Debug.println( \"  Applying IHI ... ... \" );             mutant_op = new mujava.op.IHI( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"IOD\" )) {             Debug.println( \"  Applying IOD ... ... \" );             mutant_op = new mujava.op.IOD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMR\" )) {             Debug.println( \"  Applying OMR ... ... \" );             mutant_op = new mujava.op.OMR( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"OMD\" )) {             Debug.println( \"  Applying OMD ... ... \" );             mutant_op = new mujava.op.OMD( file_env, null, cdecl );             generateMutant( mutant_op );         }         if (hasOperator( classOp, \"JDC\" )) {             Debug.println( \"  Applying JDC ... ... \" );             mutant_op = new mujava.op.JDC( file_env, null, cdecl );             generateMutant( mutant_op );         }     } }
SDL_34:110:void_genClassMutants2(openjava.ptree.ClassDeclarationList): mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_35:113:void_genClassMutants2(openjava.ptree.ClassDeclarationList): mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_36:113:void_genClassMutants2(openjava.ptree.ClassDeclarationList): mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_37:113:void_genClassMutants2(openjava.ptree.ClassDeclarationList): mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_38:113:void_genClassMutants2(openjava.ptree.ClassDeclarationList): mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_39:113:void_genClassMutants2(openjava.ptree.ClassDeclarationList): mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   mujava.op.util.DeclAnalyzer mutant_op; if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } } if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); } if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_40:119:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {     mujava.op.util.DeclAnalyzer mutant_op;     if (hasOperator( classOp, \"IHD\" )) {         Debug.println( \"  Applying IHD ... ... \" );         mutant_op = new mujava.op.IHD( file_env, null, cdecl );         generateMutant( mutant_op );         if (((mujava.op.IHD) mutant_op).getTotal() > 0) {             existIHD = true;         }     }     if (hasOperator( classOp, \"IHI\" )) {         Debug.println( \"  Applying IHI ... ... \" );         mutant_op = new mujava.op.IHI( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"IOD\" )) {         Debug.println( \"  Applying IOD ... ... \" );         mutant_op = new mujava.op.IOD( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"OMR\" )) {         Debug.println( \"  Applying OMR ... ... \" );         mutant_op = new mujava.op.OMR( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"OMD\" )) {         Debug.println( \"  Applying OMD ... ... \" );         mutant_op = new mujava.op.OMD( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"JDC\" )) {         Debug.println( \"  Applying JDC ... ... \" );         mutant_op = new mujava.op.JDC( file_env, null, cdecl );         generateMutant( mutant_op );     } }  =>   if (true) {     mujava.op.util.DeclAnalyzer mutant_op;     if (hasOperator( classOp, \"IHD\" )) {         Debug.println( \"  Applying IHD ... ... \" );         mutant_op = new mujava.op.IHD( file_env, null, cdecl );         generateMutant( mutant_op );         if (((mujava.op.IHD) mutant_op).getTotal() > 0) {             existIHD = true;         }     }     if (hasOperator( classOp, \"IHI\" )) {         Debug.println( \"  Applying IHI ... ... \" );         mutant_op = new mujava.op.IHI( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"IOD\" )) {         Debug.println( \"  Applying IOD ... ... \" );         mutant_op = new mujava.op.IOD( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"OMR\" )) {         Debug.println( \"  Applying OMR ... ... \" );         mutant_op = new mujava.op.OMR( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"OMD\" )) {         Debug.println( \"  Applying OMD ... ... \" );         mutant_op = new mujava.op.OMD( file_env, null, cdecl );         generateMutant( mutant_op );     }     if (hasOperator( classOp, \"JDC\" )) {         Debug.println( \"  Applying JDC ... ... \" );         mutant_op = new mujava.op.JDC( file_env, null, cdecl );         generateMutant( mutant_op );     } }
SDL_41:91:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IHD ... ... \" ); mutant_op = new mujava.op.IHD( file_env, null, cdecl ); generateMutant( mutant_op ); if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }  =>   mutant_op = new mujava.op.IHD( file_env, null, cdecl ); generateMutant( mutant_op ); if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }
SDL_42:91:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IHD ... ... \" ); mutant_op = new mujava.op.IHD( file_env, null, cdecl ); generateMutant( mutant_op ); if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }  =>   Debug.println( \"  Applying IHD ... ... \" ); generateMutant( mutant_op ); if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }
SDL_43:91:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IHD ... ... \" ); mutant_op = new mujava.op.IHD( file_env, null, cdecl ); generateMutant( mutant_op ); if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }  =>   Debug.println( \"  Applying IHD ... ... \" ); mutant_op = new mujava.op.IHD( file_env, null, cdecl ); if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }
SDL_44:89:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IHD ... ... \" ); mutant_op = new mujava.op.IHD( file_env, null, cdecl ); generateMutant( mutant_op ); if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }  =>   Debug.println( \"  Applying IHD ... ... \" ); mutant_op = new mujava.op.IHD( file_env, null, cdecl ); generateMutant( mutant_op );
SDL_45:93:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"IHD\" )) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } }  =>   if (true) {     Debug.println( \"  Applying IHD ... ... \" );     mutant_op = new mujava.op.IHD( file_env, null, cdecl );     generateMutant( mutant_op );     if (((mujava.op.IHD) mutant_op).getTotal() > 0) {         existIHD = true;     } }
SDL_46:90:void_genClassMutants2(openjava.ptree.ClassDeclarationList): existIHD = true;  =>  
SDL_47:92:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (((mujava.op.IHD) mutant_op).getTotal() > 0) {     existIHD = true; }  =>   if (true) {     existIHD = true; }
SDL_48:96:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IHI ... ... \" ); mutant_op = new mujava.op.IHI( file_env, null, cdecl ); generateMutant( mutant_op );  =>   mutant_op = new mujava.op.IHI( file_env, null, cdecl ); generateMutant( mutant_op );
SDL_49:96:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IHI ... ... \" ); mutant_op = new mujava.op.IHI( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying IHI ... ... \" ); generateMutant( mutant_op );
SDL_50:96:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IHI ... ... \" ); mutant_op = new mujava.op.IHI( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying IHI ... ... \" ); mutant_op = new mujava.op.IHI( file_env, null, cdecl );
SDL_51:98:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"IHI\" )) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying IHI ... ... \" );     mutant_op = new mujava.op.IHI( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_52:101:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IOD ... ... \" ); mutant_op = new mujava.op.IOD( file_env, null, cdecl ); generateMutant( mutant_op );  =>   mutant_op = new mujava.op.IOD( file_env, null, cdecl ); generateMutant( mutant_op );
SDL_53:101:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IOD ... ... \" ); mutant_op = new mujava.op.IOD( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying IOD ... ... \" ); generateMutant( mutant_op );
SDL_54:101:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IOD ... ... \" ); mutant_op = new mujava.op.IOD( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying IOD ... ... \" ); mutant_op = new mujava.op.IOD( file_env, null, cdecl );
SDL_55:103:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"IOD\" )) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying IOD ... ... \" );     mutant_op = new mujava.op.IOD( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_56:106:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OMR ... ... \" ); mutant_op = new mujava.op.OMR( file_env, null, cdecl ); generateMutant( mutant_op );  =>   mutant_op = new mujava.op.OMR( file_env, null, cdecl ); generateMutant( mutant_op );
SDL_57:106:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OMR ... ... \" ); mutant_op = new mujava.op.OMR( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying OMR ... ... \" ); generateMutant( mutant_op );
SDL_58:106:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OMR ... ... \" ); mutant_op = new mujava.op.OMR( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying OMR ... ... \" ); mutant_op = new mujava.op.OMR( file_env, null, cdecl );
SDL_59:108:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"OMR\" )) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying OMR ... ... \" );     mutant_op = new mujava.op.OMR( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_60:111:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OMD ... ... \" ); mutant_op = new mujava.op.OMD( file_env, null, cdecl ); generateMutant( mutant_op );  =>   mutant_op = new mujava.op.OMD( file_env, null, cdecl ); generateMutant( mutant_op );
SDL_61:111:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OMD ... ... \" ); mutant_op = new mujava.op.OMD( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying OMD ... ... \" ); generateMutant( mutant_op );
SDL_62:111:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OMD ... ... \" ); mutant_op = new mujava.op.OMD( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying OMD ... ... \" ); mutant_op = new mujava.op.OMD( file_env, null, cdecl );
SDL_63:113:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"OMD\" )) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying OMD ... ... \" );     mutant_op = new mujava.op.OMD( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_64:116:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JDC ... ... \" ); mutant_op = new mujava.op.JDC( file_env, null, cdecl ); generateMutant( mutant_op );  =>   mutant_op = new mujava.op.JDC( file_env, null, cdecl ); generateMutant( mutant_op );
SDL_65:116:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JDC ... ... \" ); mutant_op = new mujava.op.JDC( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying JDC ... ... \" ); generateMutant( mutant_op );
SDL_66:116:void_genClassMutants2(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JDC ... ... \" ); mutant_op = new mujava.op.JDC( file_env, null, cdecl ); generateMutant( mutant_op );  =>   Debug.println( \"  Applying JDC ... ... \" ); mutant_op = new mujava.op.JDC( file_env, null, cdecl );
SDL_67:118:void_genClassMutants2(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"JDC\" )) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying JDC ... ... \" );     mutant_op = new mujava.op.JDC( file_env, null, cdecl );     generateMutant( mutant_op ); }
SDL_68:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );         try {             mujava.op.util.Mutator mutant_op;             if (hasOperator( classOp, \"AMC\" )) {                 Debug.println( \"  Applying AMC ... ... \" );                 mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOR\" )) {                 Debug.println( \"  Applying IOR ... ... \" );                 try {                     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                     if (!parent_class.getName().equals( \"java.lang.Object\" )) {                         java.lang.String temp_str = parent_class.getName();                         java.lang.String result_str = \"\";                         for (int k = 0; k < temp_str.length(); k++) {                             char c = temp_str.charAt( k );                             if (c == '.') {                                 result_str = result_str + \"/\";                             } else {                                 result_str = result_str + c;                             }                         }                         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                         if (f.exists()) {                             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                             this.generateParseTree( f, parent_comp_unit, parent_file_env );                             this.initParseTree( parent_comp_unit, parent_file_env );                             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                             comp_unit.accept( mutant_op );                         }                     }                 } catch ( java.lang.ClassNotFoundException e ) {                     System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );                 } catch ( java.lang.NullPointerException e1 ) {                     System.out.print( \" IOP  ^^; \" );                 }             }             if (hasOperator( classOp, \"ISD\" )) {                 Debug.println( \"  Applying ISD ... ... \" );                 mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOP\" )) {                 Debug.println( \"  Applying IOP ... ... \" );                 mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IPC\" )) {                 Debug.println( \"  Applying IPC ... ... \" );                 mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PNC\" )) {                 Debug.println( \"  Applying PNC ... ... \" );                 mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PMD\" )) {                 Debug.println( \"  Applying PMD ... ... \" );                 mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PPD\" )) {                 Debug.println( \"  Applying PPD ... ... \" );                 mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PRV\" )) {                 Debug.println( \"  Applying PRV ... ... \" );                 mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCI\" )) {                 Debug.println( \"  Applying PCI ... ... \" );                 mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCC\" )) {                 Debug.println( \"  Applying PCC ... ... \" );                 mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCD\" )) {                 Debug.println( \"  Applying PCD ... ... \" );                 mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSD\" )) {                 Debug.println( \"  Applying JSC ... ... \" );                 mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSI\" )) {                 Debug.println( \"  Applying JSI ... ... \" );                 mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTD\" )) {                 Debug.println( \"  Applying JTD ... ... \" );                 mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTI\" )) {                 Debug.println( \"  Applying JTI ... ... \" );                 mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JID\" )) {                 Debug.println( \"  Applying JID ... ... \" );                 mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"OAN\" )) {                 Debug.println( \"  Applying OAN ... ... \" );                 mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOA\" )) {                 Debug.println( \"  Applying EOA ... ... \" );                 mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOC\" )) {                 Debug.println( \"  Applying EOC ... ... \" );                 mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EAM\" )) {                 Debug.println( \"  Applying EAM ... ... \" );                 mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EMM\" )) {                 Debug.println( \"  Applying EMM ... ... \" );                 mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Encountered errors during generating mutants.\" );             e.printStackTrace();         }     } }  =>  
SDL_69:126:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.ClassDeclaration cdecl = cdecls.get( j ); if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {     java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );     try {         mujava.op.util.Mutator mutant_op;         if (hasOperator( classOp, \"AMC\" )) {             Debug.println( \"  Applying AMC ... ... \" );             mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IOR\" )) {             Debug.println( \"  Applying IOR ... ... \" );             try {                 java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                 if (!parent_class.getName().equals( \"java.lang.Object\" )) {                     java.lang.String temp_str = parent_class.getName();                     java.lang.String result_str = \"\";                     for (int k = 0; k < temp_str.length(); k++) {                         char c = temp_str.charAt( k );                         if (c == '.') {                             result_str = result_str + \"/\";                         } else {                             result_str = result_str + c;                         }                     }                     java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                     if (f.exists()) {                         openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                         openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                         this.generateParseTree( f, parent_comp_unit, parent_file_env );                         this.initParseTree( parent_comp_unit, parent_file_env );                         mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                         ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                         comp_unit.accept( mutant_op );                     }                 }             } catch ( java.lang.ClassNotFoundException e ) {                 System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );             } catch ( java.lang.NullPointerException e1 ) {                 System.out.print( \" IOP  ^^; \" );             }         }         if (hasOperator( classOp, \"ISD\" )) {             Debug.println( \"  Applying ISD ... ... \" );             mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IOP\" )) {             Debug.println( \"  Applying IOP ... ... \" );             mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IPC\" )) {             Debug.println( \"  Applying IPC ... ... \" );             mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PNC\" )) {             Debug.println( \"  Applying PNC ... ... \" );             mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PMD\" )) {             Debug.println( \"  Applying PMD ... ... \" );             mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PPD\" )) {             Debug.println( \"  Applying PPD ... ... \" );             mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PRV\" )) {             Debug.println( \"  Applying PRV ... ... \" );             mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCI\" )) {             Debug.println( \"  Applying PCI ... ... \" );             mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCC\" )) {             Debug.println( \"  Applying PCC ... ... \" );             mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCD\" )) {             Debug.println( \"  Applying PCD ... ... \" );             mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JSD\" )) {             Debug.println( \"  Applying JSC ... ... \" );             mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JSI\" )) {             Debug.println( \"  Applying JSI ... ... \" );             mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JTD\" )) {             Debug.println( \"  Applying JTD ... ... \" );             mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JTI\" )) {             Debug.println( \"  Applying JTI ... ... \" );             mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JID\" )) {             Debug.println( \"  Applying JID ... ... \" );             mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"OAN\" )) {             Debug.println( \"  Applying OAN ... ... \" );             mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EOA\" )) {             Debug.println( \"  Applying EOA ... ... \" );             mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EOC\" )) {             Debug.println( \"  Applying EOC ... ... \" );             mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EAM\" )) {             Debug.println( \"  Applying EAM ... ... \" );             mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EMM\" )) {             Debug.println( \"  Applying EMM ... ... \" );             mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }     } catch ( openjava.ptree.ParseTreeException e ) {         System.err.println( \"Encountered errors during generating mutants.\" );         e.printStackTrace();     } }  =>   openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );
SDL_70:273:void_genClassMutants1(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );         try {             mujava.op.util.Mutator mutant_op;             if (hasOperator( classOp, \"AMC\" )) {                 Debug.println( \"  Applying AMC ... ... \" );                 mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOR\" )) {                 Debug.println( \"  Applying IOR ... ... \" );                 try {                     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                     if (!parent_class.getName().equals( \"java.lang.Object\" )) {                         java.lang.String temp_str = parent_class.getName();                         java.lang.String result_str = \"\";                         for (int k = 0; k < temp_str.length(); k++) {                             char c = temp_str.charAt( k );                             if (c == '.') {                                 result_str = result_str + \"/\";                             } else {                                 result_str = result_str + c;                             }                         }                         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                         if (f.exists()) {                             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                             this.generateParseTree( f, parent_comp_unit, parent_file_env );                             this.initParseTree( parent_comp_unit, parent_file_env );                             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                             comp_unit.accept( mutant_op );                         }                     }                 } catch ( java.lang.ClassNotFoundException e ) {                     System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );                 } catch ( java.lang.NullPointerException e1 ) {                     System.out.print( \" IOP  ^^; \" );                 }             }             if (hasOperator( classOp, \"ISD\" )) {                 Debug.println( \"  Applying ISD ... ... \" );                 mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOP\" )) {                 Debug.println( \"  Applying IOP ... ... \" );                 mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IPC\" )) {                 Debug.println( \"  Applying IPC ... ... \" );                 mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PNC\" )) {                 Debug.println( \"  Applying PNC ... ... \" );                 mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PMD\" )) {                 Debug.println( \"  Applying PMD ... ... \" );                 mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PPD\" )) {                 Debug.println( \"  Applying PPD ... ... \" );                 mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PRV\" )) {                 Debug.println( \"  Applying PRV ... ... \" );                 mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCI\" )) {                 Debug.println( \"  Applying PCI ... ... \" );                 mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCC\" )) {                 Debug.println( \"  Applying PCC ... ... \" );                 mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCD\" )) {                 Debug.println( \"  Applying PCD ... ... \" );                 mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSD\" )) {                 Debug.println( \"  Applying JSC ... ... \" );                 mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSI\" )) {                 Debug.println( \"  Applying JSI ... ... \" );                 mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTD\" )) {                 Debug.println( \"  Applying JTD ... ... \" );                 mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTI\" )) {                 Debug.println( \"  Applying JTI ... ... \" );                 mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JID\" )) {                 Debug.println( \"  Applying JID ... ... \" );                 mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"OAN\" )) {                 Debug.println( \"  Applying OAN ... ... \" );                 mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOA\" )) {                 Debug.println( \"  Applying EOA ... ... \" );                 mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOC\" )) {                 Debug.println( \"  Applying EOC ... ... \" );                 mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EAM\" )) {                 Debug.println( \"  Applying EAM ... ... \" );                 mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EMM\" )) {                 Debug.println( \"  Applying EMM ... ... \" );                 mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Encountered errors during generating mutants.\" );             e.printStackTrace();         }     } }  =>   for (int j = 0;; ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );         try {             mujava.op.util.Mutator mutant_op;             if (hasOperator( classOp, \"AMC\" )) {                 Debug.println( \"  Applying AMC ... ... \" );                 mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOR\" )) {                 Debug.println( \"  Applying IOR ... ... \" );                 try {                     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                     if (!parent_class.getName().equals( \"java.lang.Object\" )) {                         java.lang.String temp_str = parent_class.getName();                         java.lang.String result_str = \"\";                         for (int k = 0; k < temp_str.length(); k++) {                             char c = temp_str.charAt( k );                             if (c == '.') {                                 result_str = result_str + \"/\";                             } else {                                 result_str = result_str + c;                             }                         }                         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                         if (f.exists()) {                             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                             this.generateParseTree( f, parent_comp_unit, parent_file_env );                             this.initParseTree( parent_comp_unit, parent_file_env );                             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                             comp_unit.accept( mutant_op );                         }                     }                 } catch ( java.lang.ClassNotFoundException e ) {                     System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );                 } catch ( java.lang.NullPointerException e1 ) {                     System.out.print( \" IOP  ^^; \" );                 }             }             if (hasOperator( classOp, \"ISD\" )) {                 Debug.println( \"  Applying ISD ... ... \" );                 mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOP\" )) {                 Debug.println( \"  Applying IOP ... ... \" );                 mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IPC\" )) {                 Debug.println( \"  Applying IPC ... ... \" );                 mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PNC\" )) {                 Debug.println( \"  Applying PNC ... ... \" );                 mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PMD\" )) {                 Debug.println( \"  Applying PMD ... ... \" );                 mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PPD\" )) {                 Debug.println( \"  Applying PPD ... ... \" );                 mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PRV\" )) {                 Debug.println( \"  Applying PRV ... ... \" );                 mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCI\" )) {                 Debug.println( \"  Applying PCI ... ... \" );                 mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCC\" )) {                 Debug.println( \"  Applying PCC ... ... \" );                 mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCD\" )) {                 Debug.println( \"  Applying PCD ... ... \" );                 mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSD\" )) {                 Debug.println( \"  Applying JSC ... ... \" );                 mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSI\" )) {                 Debug.println( \"  Applying JSI ... ... \" );                 mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTD\" )) {                 Debug.println( \"  Applying JTD ... ... \" );                 mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTI\" )) {                 Debug.println( \"  Applying JTI ... ... \" );                 mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JID\" )) {                 Debug.println( \"  Applying JID ... ... \" );                 mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"OAN\" )) {                 Debug.println( \"  Applying OAN ... ... \" );                 mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOA\" )) {                 Debug.println( \"  Applying EOA ... ... \" );                 mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOC\" )) {                 Debug.println( \"  Applying EOC ... ... \" );                 mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EAM\" )) {                 Debug.println( \"  Applying EAM ... ... \" );                 mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EMM\" )) {                 Debug.println( \"  Applying EMM ... ... \" );                 mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Encountered errors during generating mutants.\" );             e.printStackTrace();         }     } }
SDL_71:273:void_genClassMutants1(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );         try {             mujava.op.util.Mutator mutant_op;             if (hasOperator( classOp, \"AMC\" )) {                 Debug.println( \"  Applying AMC ... ... \" );                 mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOR\" )) {                 Debug.println( \"  Applying IOR ... ... \" );                 try {                     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                     if (!parent_class.getName().equals( \"java.lang.Object\" )) {                         java.lang.String temp_str = parent_class.getName();                         java.lang.String result_str = \"\";                         for (int k = 0; k < temp_str.length(); k++) {                             char c = temp_str.charAt( k );                             if (c == '.') {                                 result_str = result_str + \"/\";                             } else {                                 result_str = result_str + c;                             }                         }                         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                         if (f.exists()) {                             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                             this.generateParseTree( f, parent_comp_unit, parent_file_env );                             this.initParseTree( parent_comp_unit, parent_file_env );                             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                             comp_unit.accept( mutant_op );                         }                     }                 } catch ( java.lang.ClassNotFoundException e ) {                     System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );                 } catch ( java.lang.NullPointerException e1 ) {                     System.out.print( \" IOP  ^^; \" );                 }             }             if (hasOperator( classOp, \"ISD\" )) {                 Debug.println( \"  Applying ISD ... ... \" );                 mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOP\" )) {                 Debug.println( \"  Applying IOP ... ... \" );                 mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IPC\" )) {                 Debug.println( \"  Applying IPC ... ... \" );                 mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PNC\" )) {                 Debug.println( \"  Applying PNC ... ... \" );                 mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PMD\" )) {                 Debug.println( \"  Applying PMD ... ... \" );                 mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PPD\" )) {                 Debug.println( \"  Applying PPD ... ... \" );                 mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PRV\" )) {                 Debug.println( \"  Applying PRV ... ... \" );                 mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCI\" )) {                 Debug.println( \"  Applying PCI ... ... \" );                 mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCC\" )) {                 Debug.println( \"  Applying PCC ... ... \" );                 mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCD\" )) {                 Debug.println( \"  Applying PCD ... ... \" );                 mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSD\" )) {                 Debug.println( \"  Applying JSC ... ... \" );                 mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSI\" )) {                 Debug.println( \"  Applying JSI ... ... \" );                 mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTD\" )) {                 Debug.println( \"  Applying JTD ... ... \" );                 mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTI\" )) {                 Debug.println( \"  Applying JTI ... ... \" );                 mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JID\" )) {                 Debug.println( \"  Applying JID ... ... \" );                 mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"OAN\" )) {                 Debug.println( \"  Applying OAN ... ... \" );                 mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOA\" )) {                 Debug.println( \"  Applying EOA ... ... \" );                 mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOC\" )) {                 Debug.println( \"  Applying EOC ... ... \" );                 mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EAM\" )) {                 Debug.println( \"  Applying EAM ... ... \" );                 mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EMM\" )) {                 Debug.println( \"  Applying EMM ... ... \" );                 mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Encountered errors during generating mutants.\" );             e.printStackTrace();         }     } }  =>   for (int j = 0; j < cdecls.size();) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );         try {             mujava.op.util.Mutator mutant_op;             if (hasOperator( classOp, \"AMC\" )) {                 Debug.println( \"  Applying AMC ... ... \" );                 mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOR\" )) {                 Debug.println( \"  Applying IOR ... ... \" );                 try {                     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                     if (!parent_class.getName().equals( \"java.lang.Object\" )) {                         java.lang.String temp_str = parent_class.getName();                         java.lang.String result_str = \"\";                         for (int k = 0; k < temp_str.length(); k++) {                             char c = temp_str.charAt( k );                             if (c == '.') {                                 result_str = result_str + \"/\";                             } else {                                 result_str = result_str + c;                             }                         }                         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                         if (f.exists()) {                             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                             this.generateParseTree( f, parent_comp_unit, parent_file_env );                             this.initParseTree( parent_comp_unit, parent_file_env );                             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                             comp_unit.accept( mutant_op );                         }                     }                 } catch ( java.lang.ClassNotFoundException e ) {                     System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );                 } catch ( java.lang.NullPointerException e1 ) {                     System.out.print( \" IOP  ^^; \" );                 }             }             if (hasOperator( classOp, \"ISD\" )) {                 Debug.println( \"  Applying ISD ... ... \" );                 mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IOP\" )) {                 Debug.println( \"  Applying IOP ... ... \" );                 mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"IPC\" )) {                 Debug.println( \"  Applying IPC ... ... \" );                 mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PNC\" )) {                 Debug.println( \"  Applying PNC ... ... \" );                 mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PMD\" )) {                 Debug.println( \"  Applying PMD ... ... \" );                 mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PPD\" )) {                 Debug.println( \"  Applying PPD ... ... \" );                 mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PRV\" )) {                 Debug.println( \"  Applying PRV ... ... \" );                 mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCI\" )) {                 Debug.println( \"  Applying PCI ... ... \" );                 mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCC\" )) {                 Debug.println( \"  Applying PCC ... ... \" );                 mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"PCD\" )) {                 Debug.println( \"  Applying PCD ... ... \" );                 mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSD\" )) {                 Debug.println( \"  Applying JSC ... ... \" );                 mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JSI\" )) {                 Debug.println( \"  Applying JSI ... ... \" );                 mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTD\" )) {                 Debug.println( \"  Applying JTD ... ... \" );                 mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JTI\" )) {                 Debug.println( \"  Applying JTI ... ... \" );                 mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"JID\" )) {                 Debug.println( \"  Applying JID ... ... \" );                 mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"OAN\" )) {                 Debug.println( \"  Applying OAN ... ... \" );                 mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOA\" )) {                 Debug.println( \"  Applying EOA ... ... \" );                 mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EOC\" )) {                 Debug.println( \"  Applying EOC ... ... \" );                 mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EAM\" )) {                 Debug.println( \"  Applying EAM ... ... \" );                 mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( classOp, \"EMM\" )) {                 Debug.println( \"  Applying EMM ... ... \" );                 mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Encountered errors during generating mutants.\" );             e.printStackTrace();         }     } }
SDL_72:272:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {     java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );     try {         mujava.op.util.Mutator mutant_op;         if (hasOperator( classOp, \"AMC\" )) {             Debug.println( \"  Applying AMC ... ... \" );             mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IOR\" )) {             Debug.println( \"  Applying IOR ... ... \" );             try {                 java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                 if (!parent_class.getName().equals( \"java.lang.Object\" )) {                     java.lang.String temp_str = parent_class.getName();                     java.lang.String result_str = \"\";                     for (int k = 0; k < temp_str.length(); k++) {                         char c = temp_str.charAt( k );                         if (c == '.') {                             result_str = result_str + \"/\";                         } else {                             result_str = result_str + c;                         }                     }                     java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                     if (f.exists()) {                         openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                         openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                         this.generateParseTree( f, parent_comp_unit, parent_file_env );                         this.initParseTree( parent_comp_unit, parent_file_env );                         mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                         ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                         comp_unit.accept( mutant_op );                     }                 }             } catch ( java.lang.ClassNotFoundException e ) {                 System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );             } catch ( java.lang.NullPointerException e1 ) {                 System.out.print( \" IOP  ^^; \" );             }         }         if (hasOperator( classOp, \"ISD\" )) {             Debug.println( \"  Applying ISD ... ... \" );             mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IOP\" )) {             Debug.println( \"  Applying IOP ... ... \" );             mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IPC\" )) {             Debug.println( \"  Applying IPC ... ... \" );             mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PNC\" )) {             Debug.println( \"  Applying PNC ... ... \" );             mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PMD\" )) {             Debug.println( \"  Applying PMD ... ... \" );             mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PPD\" )) {             Debug.println( \"  Applying PPD ... ... \" );             mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PRV\" )) {             Debug.println( \"  Applying PRV ... ... \" );             mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCI\" )) {             Debug.println( \"  Applying PCI ... ... \" );             mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCC\" )) {             Debug.println( \"  Applying PCC ... ... \" );             mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCD\" )) {             Debug.println( \"  Applying PCD ... ... \" );             mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JSD\" )) {             Debug.println( \"  Applying JSC ... ... \" );             mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JSI\" )) {             Debug.println( \"  Applying JSI ... ... \" );             mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JTD\" )) {             Debug.println( \"  Applying JTD ... ... \" );             mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JTI\" )) {             Debug.println( \"  Applying JTI ... ... \" );             mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JID\" )) {             Debug.println( \"  Applying JID ... ... \" );             mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"OAN\" )) {             Debug.println( \"  Applying OAN ... ... \" );             mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EOA\" )) {             Debug.println( \"  Applying EOA ... ... \" );             mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EOC\" )) {             Debug.println( \"  Applying EOC ... ... \" );             mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EAM\" )) {             Debug.println( \"  Applying EAM ... ... \" );             mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EMM\" )) {             Debug.println( \"  Applying EMM ... ... \" );             mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }     } catch ( openjava.ptree.ParseTreeException e ) {         System.err.println( \"Encountered errors during generating mutants.\" );         e.printStackTrace();     } }  =>   if (true) {     java.lang.String qname = file_env.toQualifiedName( cdecl.getName() );     try {         mujava.op.util.Mutator mutant_op;         if (hasOperator( classOp, \"AMC\" )) {             Debug.println( \"  Applying AMC ... ... \" );             mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IOR\" )) {             Debug.println( \"  Applying IOR ... ... \" );             try {                 java.lang.Class parent_class = Class.forName( qname ).getSuperclass();                 if (!parent_class.getName().equals( \"java.lang.Object\" )) {                     java.lang.String temp_str = parent_class.getName();                     java.lang.String result_str = \"\";                     for (int k = 0; k < temp_str.length(); k++) {                         char c = temp_str.charAt( k );                         if (c == '.') {                             result_str = result_str + \"/\";                         } else {                             result_str = result_str + c;                         }                     }                     java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                     if (f.exists()) {                         openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                         openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                         this.generateParseTree( f, parent_comp_unit, parent_file_env );                         this.initParseTree( parent_comp_unit, parent_file_env );                         mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                         ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                         comp_unit.accept( mutant_op );                     }                 }             } catch ( java.lang.ClassNotFoundException e ) {                 System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );             } catch ( java.lang.NullPointerException e1 ) {                 System.out.print( \" IOP  ^^; \" );             }         }         if (hasOperator( classOp, \"ISD\" )) {             Debug.println( \"  Applying ISD ... ... \" );             mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IOP\" )) {             Debug.println( \"  Applying IOP ... ... \" );             mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"IPC\" )) {             Debug.println( \"  Applying IPC ... ... \" );             mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PNC\" )) {             Debug.println( \"  Applying PNC ... ... \" );             mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PMD\" )) {             Debug.println( \"  Applying PMD ... ... \" );             mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PPD\" )) {             Debug.println( \"  Applying PPD ... ... \" );             mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PRV\" )) {             Debug.println( \"  Applying PRV ... ... \" );             mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCI\" )) {             Debug.println( \"  Applying PCI ... ... \" );             mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCC\" )) {             Debug.println( \"  Applying PCC ... ... \" );             mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"PCD\" )) {             Debug.println( \"  Applying PCD ... ... \" );             mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JSD\" )) {             Debug.println( \"  Applying JSC ... ... \" );             mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JSI\" )) {             Debug.println( \"  Applying JSI ... ... \" );             mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JTD\" )) {             Debug.println( \"  Applying JTD ... ... \" );             mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JTI\" )) {             Debug.println( \"  Applying JTI ... ... \" );             mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"JID\" )) {             Debug.println( \"  Applying JID ... ... \" );             mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"OAN\" )) {             Debug.println( \"  Applying OAN ... ... \" );             mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EOA\" )) {             Debug.println( \"  Applying EOA ... ... \" );             mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EOC\" )) {             Debug.println( \"  Applying EOC ... ... \" );             mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EAM\" )) {             Debug.println( \"  Applying EAM ... ... \" );             mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( classOp, \"EMM\" )) {             Debug.println( \"  Applying EMM ... ... \" );             mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }     } catch ( openjava.ptree.ParseTreeException e ) {         System.err.println( \"Encountered errors during generating mutants.\" );         e.printStackTrace();     } }
SDL_73:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_74:236:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_75:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_76:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_77:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_78:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_79:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_80:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_81:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_82:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_83:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_84:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_85:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_86:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_87:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_88:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_89:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_90:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_91:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_92:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_93:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_94:263:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EMM\" )) {         Debug.println( \"  Applying EMM ... ... \" );         mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Encountered errors during generating mutants.\" );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     if (hasOperator( classOp, \"AMC\" )) {         Debug.println( \"  Applying AMC ... ... \" );         mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOR\" )) {         Debug.println( \"  Applying IOR ... ... \" );         try {             java.lang.Class parent_class = Class.forName( qname ).getSuperclass();             if (!parent_class.getName().equals( \"java.lang.Object\" )) {                 java.lang.String temp_str = parent_class.getName();                 java.lang.String result_str = \"\";                 for (int k = 0; k < temp_str.length(); k++) {                     char c = temp_str.charAt( k );                     if (c == '.') {                         result_str = result_str + \"/\";                     } else {                         result_str = result_str + c;                     }                 }                 java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );                 if (f.exists()) {                     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                     this.generateParseTree( f, parent_comp_unit, parent_file_env );                     this.initParseTree( parent_comp_unit, parent_file_env );                     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                     comp_unit.accept( mutant_op );                 }             }         } catch ( java.lang.ClassNotFoundException e ) {             System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );         } catch ( java.lang.NullPointerException e1 ) {             System.out.print( \" IOP  ^^; \" );         }     }     if (hasOperator( classOp, \"ISD\" )) {         Debug.println( \"  Applying ISD ... ... \" );         mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IOP\" )) {         Debug.println( \"  Applying IOP ... ... \" );         mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"IPC\" )) {         Debug.println( \"  Applying IPC ... ... \" );         mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PNC\" )) {         Debug.println( \"  Applying PNC ... ... \" );         mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PMD\" )) {         Debug.println( \"  Applying PMD ... ... \" );         mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PPD\" )) {         Debug.println( \"  Applying PPD ... ... \" );         mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PRV\" )) {         Debug.println( \"  Applying PRV ... ... \" );         mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCI\" )) {         Debug.println( \"  Applying PCI ... ... \" );         mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCC\" )) {         Debug.println( \"  Applying PCC ... ... \" );         mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"PCD\" )) {         Debug.println( \"  Applying PCD ... ... \" );         mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSD\" )) {         Debug.println( \"  Applying JSC ... ... \" );         mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JSI\" )) {         Debug.println( \"  Applying JSI ... ... \" );         mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTD\" )) {         Debug.println( \"  Applying JTD ... ... \" );         mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JTI\" )) {         Debug.println( \"  Applying JTI ... ... \" );         mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"JID\" )) {         Debug.println( \"  Applying JID ... ... \" );         mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"OAN\" )) {         Debug.println( \"  Applying OAN ... ... \" );         mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOA\" )) {         Debug.println( \"  Applying EOA ... ... \" );         mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EOC\" )) {         Debug.println( \"  Applying EOC ... ... \" );         mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( classOp, \"EAM\" )) {         Debug.println( \"  Applying EAM ... ... \" );         mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_95:133:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AMC ... ... \" ); mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_96:133:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AMC ... ... \" ); mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AMC ... ... \" ); comp_unit.accept( mutant_op );
SDL_97:133:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AMC ... ... \" ); mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AMC ... ... \" ); mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );
SDL_98:135:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"AMC\" )) {     Debug.println( \"  Applying AMC ... ... \" );     mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying AMC ... ... \" );     mutant_op = new mujava.op.AMC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_99:165:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IOR ... ... \" ); try {     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();     if (!parent_class.getName().equals( \"java.lang.Object\" )) {         java.lang.String temp_str = parent_class.getName();         java.lang.String result_str = \"\";         for (int k = 0; k < temp_str.length(); k++) {             char c = temp_str.charAt( k );             if (c == '.') {                 result_str = result_str + \"/\";             } else {                 result_str = result_str + c;             }         }         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );         if (f.exists()) {             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];             this.generateParseTree( f, parent_comp_unit, parent_file_env );             this.initParseTree( parent_comp_unit, parent_file_env );             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );             comp_unit.accept( mutant_op );         }     } } catch ( java.lang.ClassNotFoundException e ) {     System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" ); } catch ( java.lang.NullPointerException e1 ) {     System.out.print( \" IOP  ^^; \" ); }  =>   try {     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();     if (!parent_class.getName().equals( \"java.lang.Object\" )) {         java.lang.String temp_str = parent_class.getName();         java.lang.String result_str = \"\";         for (int k = 0; k < temp_str.length(); k++) {             char c = temp_str.charAt( k );             if (c == '.') {                 result_str = result_str + \"/\";             } else {                 result_str = result_str + c;             }         }         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );         if (f.exists()) {             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];             this.generateParseTree( f, parent_comp_unit, parent_file_env );             this.initParseTree( parent_comp_unit, parent_file_env );             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );             comp_unit.accept( mutant_op );         }     } } catch ( java.lang.ClassNotFoundException e ) {     System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" ); } catch ( java.lang.NullPointerException e1 ) {     System.out.print( \" IOP  ^^; \" ); }
SDL_100:167:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"IOR\" )) {     Debug.println( \"  Applying IOR ... ... \" );     try {         java.lang.Class parent_class = Class.forName( qname ).getSuperclass();         if (!parent_class.getName().equals( \"java.lang.Object\" )) {             java.lang.String temp_str = parent_class.getName();             java.lang.String result_str = \"\";             for (int k = 0; k < temp_str.length(); k++) {                 char c = temp_str.charAt( k );                 if (c == '.') {                     result_str = result_str + \"/\";                 } else {                     result_str = result_str + c;                 }             }             java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );             if (f.exists()) {                 openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                 openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                 this.generateParseTree( f, parent_comp_unit, parent_file_env );                 this.initParseTree( parent_comp_unit, parent_file_env );                 mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                 ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                 comp_unit.accept( mutant_op );             }         }     } catch ( java.lang.ClassNotFoundException e ) {         System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );     } catch ( java.lang.NullPointerException e1 ) {         System.out.print( \" IOP  ^^; \" );     } }  =>   if (true) {     Debug.println( \"  Applying IOR ... ... \" );     try {         java.lang.Class parent_class = Class.forName( qname ).getSuperclass();         if (!parent_class.getName().equals( \"java.lang.Object\" )) {             java.lang.String temp_str = parent_class.getName();             java.lang.String result_str = \"\";             for (int k = 0; k < temp_str.length(); k++) {                 char c = temp_str.charAt( k );                 if (c == '.') {                     result_str = result_str + \"/\";                 } else {                     result_str = result_str + c;                 }             }             java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );             if (f.exists()) {                 openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];                 openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];                 this.generateParseTree( f, parent_comp_unit, parent_file_env );                 this.initParseTree( parent_comp_unit, parent_file_env );                 mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );                 ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );                 comp_unit.accept( mutant_op );             }         }     } catch ( java.lang.ClassNotFoundException e ) {         System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" );     } catch ( java.lang.NullPointerException e1 ) {         System.out.print( \" IOP  ^^; \" );     } }
SDL_101:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();     if (!parent_class.getName().equals( \"java.lang.Object\" )) {         java.lang.String temp_str = parent_class.getName();         java.lang.String result_str = \"\";         for (int k = 0; k < temp_str.length(); k++) {             char c = temp_str.charAt( k );             if (c == '.') {                 result_str = result_str + \"/\";             } else {                 result_str = result_str + c;             }         }         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );         if (f.exists()) {             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];             this.generateParseTree( f, parent_comp_unit, parent_file_env );             this.initParseTree( parent_comp_unit, parent_file_env );             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );             comp_unit.accept( mutant_op );         }     } } catch ( java.lang.ClassNotFoundException e ) {     System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" ); } catch ( java.lang.NullPointerException e1 ) {     System.out.print( \" IOP  ^^; \" ); }  =>   try {     java.lang.Class parent_class = Class.forName( qname ).getSuperclass(); } catch ( java.lang.NullPointerException e1 ) {     System.out.print( \" IOP  ^^; \" ); }
SDL_102:152:void_genClassMutants1(openjava.ptree.ClassDeclarationList): java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } } java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" ); if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }  =>   java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" ); if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }
SDL_103:151:void_genClassMutants1(openjava.ptree.ClassDeclarationList): java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } } java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" ); if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }  =>   java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } } java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );
SDL_104:161:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (!parent_class.getName().equals( \"java.lang.Object\" )) {     java.lang.String temp_str = parent_class.getName();     java.lang.String result_str = \"\";     for (int k = 0; k < temp_str.length(); k++) {         char c = temp_str.charAt( k );         if (c == '.') {             result_str = result_str + \"/\";         } else {             result_str = result_str + c;         }     }     java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );     if (f.exists()) {         openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];         openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];         this.generateParseTree( f, parent_comp_unit, parent_file_env );         this.initParseTree( parent_comp_unit, parent_file_env );         mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );         ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );         comp_unit.accept( mutant_op );     } }  =>   if (true) {     java.lang.String temp_str = parent_class.getName();     java.lang.String result_str = \"\";     for (int k = 0; k < temp_str.length(); k++) {         char c = temp_str.charAt( k );         if (c == '.') {             result_str = result_str + \"/\";         } else {             result_str = result_str + c;         }     }     java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );     if (f.exists()) {         openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];         openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];         this.generateParseTree( f, parent_comp_unit, parent_file_env );         this.initParseTree( parent_comp_unit, parent_file_env );         mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );         ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );         comp_unit.accept( mutant_op );     } }
SDL_105:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): char c = temp_str.charAt( k ); if (c == '.') {     result_str = result_str + \"/\"; } else {     result_str = result_str + c; }  =>   char c = temp_str.charAt( k );
SDL_106:150:void_genClassMutants1(openjava.ptree.ClassDeclarationList): for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }  =>   for (int k = 0;; k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }
SDL_107:150:void_genClassMutants1(openjava.ptree.ClassDeclarationList): for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }  =>   for (int k = 0; k < temp_str.length();) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }
SDL_108:145:void_genClassMutants1(openjava.ptree.ClassDeclarationList): result_str = result_str + \"/\";  =>  
SDL_109:149:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (c == '.') {     result_str = result_str + \"/\"; } else {     result_str = result_str + c; }  =>   if (true) {     result_str = result_str + \"/\"; } else {     result_str = result_str + c; }
SDL_110:147:void_genClassMutants1(openjava.ptree.ClassDeclarationList): result_str = result_str + c;  =>  
SDL_111:158:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );
SDL_112:158:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );
SDL_113:158:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );
SDL_114:158:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_115:158:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );
SDL_116:160:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }  =>   if (true) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }
SDL_117:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList): try {     java.lang.Class parent_class = Class.forName( qname ).getSuperclass();     if (!parent_class.getName().equals( \"java.lang.Object\" )) {         java.lang.String temp_str = parent_class.getName();         java.lang.String result_str = \"\";         for (int k = 0; k < temp_str.length(); k++) {             char c = temp_str.charAt( k );             if (c == '.') {                 result_str = result_str + \"/\";             } else {                 result_str = result_str + c;             }         }         java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );         if (f.exists()) {             openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];             openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];             this.generateParseTree( f, parent_comp_unit, parent_file_env );             this.initParseTree( parent_comp_unit, parent_file_env );             mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );             ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );             comp_unit.accept( mutant_op );         }     } } catch ( java.lang.ClassNotFoundException e ) {     System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" ); } catch ( java.lang.NullPointerException e1 ) {     System.out.print( \" IOP  ^^; \" ); }  =>   try {     java.lang.Class parent_class = Class.forName( qname ).getSuperclass(); } catch ( java.lang.ClassNotFoundException e ) {     System.out.println( \" Exception at generating IOR mutant. File : AllMutantsGenerator.java \" ); }
SDL_118:152:void_genClassMutants1(openjava.ptree.ClassDeclarationList): java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } } java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" ); if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }  =>   java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" ); if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }
SDL_119:151:void_genClassMutants1(openjava.ptree.ClassDeclarationList): java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } } java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" ); if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }  =>   java.lang.String temp_str = parent_class.getName(); java.lang.String result_str = \"\"; for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } } java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );
SDL_120:161:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (!parent_class.getName().equals( \"java.lang.Object\" )) {     java.lang.String temp_str = parent_class.getName();     java.lang.String result_str = \"\";     for (int k = 0; k < temp_str.length(); k++) {         char c = temp_str.charAt( k );         if (c == '.') {             result_str = result_str + \"/\";         } else {             result_str = result_str + c;         }     }     java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );     if (f.exists()) {         openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];         openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];         this.generateParseTree( f, parent_comp_unit, parent_file_env );         this.initParseTree( parent_comp_unit, parent_file_env );         mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );         ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );         comp_unit.accept( mutant_op );     } }  =>   if (true) {     java.lang.String temp_str = parent_class.getName();     java.lang.String result_str = \"\";     for (int k = 0; k < temp_str.length(); k++) {         char c = temp_str.charAt( k );         if (c == '.') {             result_str = result_str + \"/\";         } else {             result_str = result_str + c;         }     }     java.io.File f = new java.io.File( MutationSystem.SRC_PATH, result_str + \".java\" );     if (f.exists()) {         openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];         openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];         this.generateParseTree( f, parent_comp_unit, parent_file_env );         this.initParseTree( parent_comp_unit, parent_file_env );         mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );         ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );         comp_unit.accept( mutant_op );     } }
SDL_121:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList): char c = temp_str.charAt( k ); if (c == '.') {     result_str = result_str + \"/\"; } else {     result_str = result_str + c; }  =>   char c = temp_str.charAt( k );
SDL_122:150:void_genClassMutants1(openjava.ptree.ClassDeclarationList): for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }  =>   for (int k = 0;; k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }
SDL_123:150:void_genClassMutants1(openjava.ptree.ClassDeclarationList): for (int k = 0; k < temp_str.length(); k++) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }  =>   for (int k = 0; k < temp_str.length();) {     char c = temp_str.charAt( k );     if (c == '.') {         result_str = result_str + \"/\";     } else {         result_str = result_str + c;     } }
SDL_124:145:void_genClassMutants1(openjava.ptree.ClassDeclarationList): result_str = result_str + \"/\";  =>  
SDL_125:149:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (c == '.') {     result_str = result_str + \"/\"; } else {     result_str = result_str + c; }  =>   if (true) {     result_str = result_str + \"/\"; } else {     result_str = result_str + c; }
SDL_126:147:void_genClassMutants1(openjava.ptree.ClassDeclarationList): result_str = result_str + c;  =>  
SDL_127:158:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );
SDL_128:158:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );
SDL_129:158:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );
SDL_130:158:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_131:158:void_genClassMutants1(openjava.ptree.ClassDeclarationList): openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] ); comp_unit.accept( mutant_op );  =>   openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1]; openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1]; this.generateParseTree( f, parent_comp_unit, parent_file_env ); this.initParseTree( parent_comp_unit, parent_file_env ); mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit ); ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );
SDL_132:160:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (f.exists()) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }  =>   if (true) {     openjava.ptree.CompilationUnit[] parent_comp_unit = new openjava.ptree.CompilationUnit[1];     openjava.mop.FileEnvironment[] parent_file_env = new openjava.mop.FileEnvironment[1];     this.generateParseTree( f, parent_comp_unit, parent_file_env );     this.initParseTree( parent_comp_unit, parent_file_env );     mutant_op = new mujava.op.IOR( file_env, cdecl, comp_unit );     ((mujava.op.IOR) mutant_op).setParentEnv( parent_file_env[0], parent_comp_unit[0] );     comp_unit.accept( mutant_op ); }
SDL_133:170:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ISD ... ... \" ); mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_134:170:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ISD ... ... \" ); mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying ISD ... ... \" ); comp_unit.accept( mutant_op );
SDL_135:170:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ISD ... ... \" ); mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying ISD ... ... \" ); mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );
SDL_136:172:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"ISD\" )) {     Debug.println( \"  Applying ISD ... ... \" );     mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying ISD ... ... \" );     mutant_op = new mujava.op.ISD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_137:175:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IOP ... ... \" ); mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_138:175:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IOP ... ... \" ); mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying IOP ... ... \" ); comp_unit.accept( mutant_op );
SDL_139:175:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IOP ... ... \" ); mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying IOP ... ... \" ); mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );
SDL_140:177:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"IOP\" )) {     Debug.println( \"  Applying IOP ... ... \" );     mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying IOP ... ... \" );     mutant_op = new mujava.op.IOP( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_141:180:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IPC ... ... \" ); mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_142:180:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IPC ... ... \" ); mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying IPC ... ... \" ); comp_unit.accept( mutant_op );
SDL_143:180:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying IPC ... ... \" ); mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying IPC ... ... \" ); mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );
SDL_144:182:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"IPC\" )) {     Debug.println( \"  Applying IPC ... ... \" );     mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying IPC ... ... \" );     mutant_op = new mujava.op.IPC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_145:185:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PNC ... ... \" ); mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_146:185:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PNC ... ... \" ); mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PNC ... ... \" ); comp_unit.accept( mutant_op );
SDL_147:185:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PNC ... ... \" ); mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PNC ... ... \" ); mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );
SDL_148:187:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"PNC\" )) {     Debug.println( \"  Applying PNC ... ... \" );     mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying PNC ... ... \" );     mutant_op = new mujava.op.PNC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_149:190:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PMD ... ... \" ); mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_150:190:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PMD ... ... \" ); mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PMD ... ... \" ); comp_unit.accept( mutant_op );
SDL_151:190:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PMD ... ... \" ); mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PMD ... ... \" ); mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );
SDL_152:192:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"PMD\" )) {     Debug.println( \"  Applying PMD ... ... \" );     mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying PMD ... ... \" );     mutant_op = new mujava.op.PMD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_153:195:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PPD ... ... \" ); mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_154:195:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PPD ... ... \" ); mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PPD ... ... \" ); comp_unit.accept( mutant_op );
SDL_155:195:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PPD ... ... \" ); mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PPD ... ... \" ); mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );
SDL_156:197:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"PPD\" )) {     Debug.println( \"  Applying PPD ... ... \" );     mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying PPD ... ... \" );     mutant_op = new mujava.op.PPD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_157:200:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PRV ... ... \" ); mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_158:200:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PRV ... ... \" ); mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PRV ... ... \" ); comp_unit.accept( mutant_op );
SDL_159:200:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PRV ... ... \" ); mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PRV ... ... \" ); mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );
SDL_160:202:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"PRV\" )) {     Debug.println( \"  Applying PRV ... ... \" );     mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying PRV ... ... \" );     mutant_op = new mujava.op.PRV( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_161:205:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCI ... ... \" ); mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_162:205:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCI ... ... \" ); mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PCI ... ... \" ); comp_unit.accept( mutant_op );
SDL_163:205:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCI ... ... \" ); mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PCI ... ... \" ); mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );
SDL_164:207:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"PCI\" )) {     Debug.println( \"  Applying PCI ... ... \" );     mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying PCI ... ... \" );     mutant_op = new mujava.op.PCI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_165:210:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCC ... ... \" ); mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_166:210:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCC ... ... \" ); mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PCC ... ... \" ); comp_unit.accept( mutant_op );
SDL_167:210:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCC ... ... \" ); mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PCC ... ... \" ); mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );
SDL_168:212:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"PCC\" )) {     Debug.println( \"  Applying PCC ... ... \" );     mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying PCC ... ... \" );     mutant_op = new mujava.op.PCC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_169:215:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCD ... ... \" ); mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_170:215:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCD ... ... \" ); mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PCD ... ... \" ); comp_unit.accept( mutant_op );
SDL_171:215:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying PCD ... ... \" ); mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying PCD ... ... \" ); mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );
SDL_172:217:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"PCD\" )) {     Debug.println( \"  Applying PCD ... ... \" );     mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying PCD ... ... \" );     mutant_op = new mujava.op.PCD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_173:220:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JSC ... ... \" ); mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_174:220:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JSC ... ... \" ); mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JSC ... ... \" ); comp_unit.accept( mutant_op );
SDL_175:220:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JSC ... ... \" ); mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JSC ... ... \" ); mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );
SDL_176:222:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"JSD\" )) {     Debug.println( \"  Applying JSC ... ... \" );     mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying JSC ... ... \" );     mutant_op = new mujava.op.JSD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_177:225:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JSI ... ... \" ); mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_178:225:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JSI ... ... \" ); mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JSI ... ... \" ); comp_unit.accept( mutant_op );
SDL_179:225:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JSI ... ... \" ); mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JSI ... ... \" ); mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );
SDL_180:227:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"JSI\" )) {     Debug.println( \"  Applying JSI ... ... \" );     mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying JSI ... ... \" );     mutant_op = new mujava.op.JSI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_181:230:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JTD ... ... \" ); mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_182:230:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JTD ... ... \" ); mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JTD ... ... \" ); comp_unit.accept( mutant_op );
SDL_183:230:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JTD ... ... \" ); mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JTD ... ... \" ); mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );
SDL_184:232:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"JTD\" )) {     Debug.println( \"  Applying JTD ... ... \" );     mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying JTD ... ... \" );     mutant_op = new mujava.op.JTD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_185:235:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JTI ... ... \" ); mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_186:235:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JTI ... ... \" ); mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JTI ... ... \" ); comp_unit.accept( mutant_op );
SDL_187:235:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JTI ... ... \" ); mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JTI ... ... \" ); mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );
SDL_188:237:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"JTI\" )) {     Debug.println( \"  Applying JTI ... ... \" );     mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying JTI ... ... \" );     mutant_op = new mujava.op.JTI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_189:240:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JID ... ... \" ); mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_190:240:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JID ... ... \" ); mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JID ... ... \" ); comp_unit.accept( mutant_op );
SDL_191:240:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying JID ... ... \" ); mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying JID ... ... \" ); mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );
SDL_192:242:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"JID\" )) {     Debug.println( \"  Applying JID ... ... \" );     mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying JID ... ... \" );     mutant_op = new mujava.op.JID( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_193:245:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OAN ... ... \" ); mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_194:245:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OAN ... ... \" ); mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying OAN ... ... \" ); comp_unit.accept( mutant_op );
SDL_195:245:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying OAN ... ... \" ); mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying OAN ... ... \" ); mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );
SDL_196:247:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"OAN\" )) {     Debug.println( \"  Applying OAN ... ... \" );     mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying OAN ... ... \" );     mutant_op = new mujava.op.OAN( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_197:250:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EOA ... ... \" ); mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_198:250:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EOA ... ... \" ); mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EOA ... ... \" ); comp_unit.accept( mutant_op );
SDL_199:250:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EOA ... ... \" ); mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EOA ... ... \" ); mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );
SDL_200:252:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"EOA\" )) {     Debug.println( \"  Applying EOA ... ... \" );     mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying EOA ... ... \" );     mutant_op = new mujava.op.EOA( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_201:255:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EOC ... ... \" ); mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_202:255:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EOC ... ... \" ); mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EOC ... ... \" ); comp_unit.accept( mutant_op );
SDL_203:255:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EOC ... ... \" ); mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EOC ... ... \" ); mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );
SDL_204:257:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"EOC\" )) {     Debug.println( \"  Applying EOC ... ... \" );     mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying EOC ... ... \" );     mutant_op = new mujava.op.EOC( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_205:260:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EAM ... ... \" ); mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_206:260:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EAM ... ... \" ); mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EAM ... ... \" ); comp_unit.accept( mutant_op );
SDL_207:260:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EAM ... ... \" ); mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EAM ... ... \" ); mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );
SDL_208:262:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"EAM\" )) {     Debug.println( \"  Applying EAM ... ... \" );     mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying EAM ... ... \" );     mutant_op = new mujava.op.EAM( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_209:265:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EMM ... ... \" ); mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_210:265:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EMM ... ... \" ); mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EMM ... ... \" ); comp_unit.accept( mutant_op );
SDL_211:265:void_genClassMutants1(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying EMM ... ... \" ); mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying EMM ... ... \" ); mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );
SDL_212:267:void_genClassMutants1(openjava.ptree.ClassDeclarationList): if (hasOperator( classOp, \"EMM\" )) {     Debug.println( \"  Applying EMM ... ... \" );     mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying EMM ... ... \" );     mutant_op = new mujava.op.EMM( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_213:282:void_compileMutants(): if (traditionalOp != null && traditionalOp.length > 0) {     Debug.println( \"* Compiling traditional mutants into bytecode\" );     MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;     super.compileMutants(); } if (classOp != null && classOp.length > 0) {     Debug.println( \"* Compiling class mutants into bytecode\" );     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     super.compileMutants(); }  =>   if (classOp != null && classOp.length > 0) {     Debug.println( \"* Compiling class mutants into bytecode\" );     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     super.compileMutants(); }
SDL_214:282:void_compileMutants(): if (traditionalOp != null && traditionalOp.length > 0) {     Debug.println( \"* Compiling traditional mutants into bytecode\" );     MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;     super.compileMutants(); } if (classOp != null && classOp.length > 0) {     Debug.println( \"* Compiling class mutants into bytecode\" );     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     super.compileMutants(); }  =>   if (traditionalOp != null && traditionalOp.length > 0) {     Debug.println( \"* Compiling traditional mutants into bytecode\" );     MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;     super.compileMutants(); }
SDL_215:280:void_compileMutants(): Debug.println( \"* Compiling traditional mutants into bytecode\" ); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; super.compileMutants();  =>   MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; super.compileMutants();
SDL_216:280:void_compileMutants(): Debug.println( \"* Compiling traditional mutants into bytecode\" ); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; super.compileMutants();  =>   Debug.println( \"* Compiling traditional mutants into bytecode\" ); super.compileMutants();
SDL_217:280:void_compileMutants(): Debug.println( \"* Compiling traditional mutants into bytecode\" ); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH; super.compileMutants();  =>   Debug.println( \"* Compiling traditional mutants into bytecode\" ); MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;
SDL_218:282:void_compileMutants(): if (traditionalOp != null && traditionalOp.length > 0) {     Debug.println( \"* Compiling traditional mutants into bytecode\" );     MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;     super.compileMutants(); }  =>   if (true) {     Debug.println( \"* Compiling traditional mutants into bytecode\" );     MutationSystem.MUTANT_PATH = MutationSystem.TRADITIONAL_MUTANT_PATH;     super.compileMutants(); }
SDL_219:285:void_compileMutants(): Debug.println( \"* Compiling class mutants into bytecode\" ); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; super.compileMutants();  =>   MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; super.compileMutants();
SDL_220:285:void_compileMutants(): Debug.println( \"* Compiling class mutants into bytecode\" ); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; super.compileMutants();  =>   Debug.println( \"* Compiling class mutants into bytecode\" ); super.compileMutants();
SDL_221:285:void_compileMutants(): Debug.println( \"* Compiling class mutants into bytecode\" ); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH; super.compileMutants();  =>   Debug.println( \"* Compiling class mutants into bytecode\" ); MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;
SDL_222:287:void_compileMutants(): if (classOp != null && classOp.length > 0) {     Debug.println( \"* Compiling class mutants into bytecode\" );     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     super.compileMutants(); }  =>   if (true) {     Debug.println( \"* Compiling class mutants into bytecode\" );     MutationSystem.MUTANT_PATH = MutationSystem.CLASS_MUTANT_PATH;     super.compileMutants(); }
SDL_223:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         try {             mujava.op.util.Mutator mutant_op;             boolean AOR_FLAG = false;             if (hasOperator( traditionalOp, \"AORB\" )) {                 Debug.println( \"  Applying AOR-Binary ... ... \" );                 AOR_FLAG = true;                 mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AORS\" )) {                 Debug.println( \"  Applying AOR-Short-Cut ... ... \" );                 AOR_FLAG = true;                 mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AODU\" )) {                 Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );                 mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );                 ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AODS\" )) {                 Debug.println( \"  Applying AOD-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AOIU\" )) {                 Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );                 mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );                 ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AOIS\" )) {                 Debug.println( \"  Applying AOI-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ROR\" )) {                 Debug.println( \"  Applying ROR ... ... \" );                 mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COR\" )) {                 Debug.println( \"  Applying COR ... ... \" );                 mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COD\" )) {                 Debug.println( \"  Applying COD ... ... \" );                 mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COI\" )) {                 Debug.println( \"  Applying COI ... ... \" );                 mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"SOR\" )) {                 Debug.println( \"  Applying SOR ... ... \" );                 mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOR\" )) {                 Debug.println( \"  Applying LOR ... ... \" );                 mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOI\" )) {                 Debug.println( \"  Applying LOI ... ... \" );                 mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOD\" )) {                 Debug.println( \"  Applying LOD ... ... \" );                 mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ASRS\" )) {                 Debug.println( \"  Applying ASR-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"SDL\" )) {                 Debug.println( \"  Applying SDL ... ... \" );                 mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"VDL\" )) {                 Debug.println( \"  Applying VDL ... ... \" );                 mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"CDL\" )) {                 Debug.println( \"  Applying CDL ... ... \" );                 mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ODL\" )) {                 Debug.println( \"  Applying ODL ... ... \" );                 mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );             e.printStackTrace();         }     } }  =>  
SDL_224:293:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): openjava.ptree.ClassDeclaration cdecl = cdecls.get( j ); if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {     try {         mujava.op.util.Mutator mutant_op;         boolean AOR_FLAG = false;         if (hasOperator( traditionalOp, \"AORB\" )) {             Debug.println( \"  Applying AOR-Binary ... ... \" );             AOR_FLAG = true;             mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AORS\" )) {             Debug.println( \"  Applying AOR-Short-Cut ... ... \" );             AOR_FLAG = true;             mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AODU\" )) {             Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );             mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );             ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AODS\" )) {             Debug.println( \"  Applying AOD-Short-Cut ... ... \" );             mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AOIU\" )) {             Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );             mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );             ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AOIS\" )) {             Debug.println( \"  Applying AOI-Short-Cut ... ... \" );             mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"ROR\" )) {             Debug.println( \"  Applying ROR ... ... \" );             mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"COR\" )) {             Debug.println( \"  Applying COR ... ... \" );             mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"COD\" )) {             Debug.println( \"  Applying COD ... ... \" );             mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"COI\" )) {             Debug.println( \"  Applying COI ... ... \" );             mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"SOR\" )) {             Debug.println( \"  Applying SOR ... ... \" );             mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"LOR\" )) {             Debug.println( \"  Applying LOR ... ... \" );             mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"LOI\" )) {             Debug.println( \"  Applying LOI ... ... \" );             mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"LOD\" )) {             Debug.println( \"  Applying LOD ... ... \" );             mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"ASRS\" )) {             Debug.println( \"  Applying ASR-Short-Cut ... ... \" );             mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"SDL\" )) {             Debug.println( \"  Applying SDL ... ... \" );             mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"VDL\" )) {             Debug.println( \"  Applying VDL ... ... \" );             mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"CDL\" )) {             Debug.println( \"  Applying CDL ... ... \" );             mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"ODL\" )) {             Debug.println( \"  Applying ODL ... ... \" );             mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }     } catch ( openjava.ptree.ParseTreeException e ) {         System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );         e.printStackTrace();     } }  =>   openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );
SDL_225:402:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         try {             mujava.op.util.Mutator mutant_op;             boolean AOR_FLAG = false;             if (hasOperator( traditionalOp, \"AORB\" )) {                 Debug.println( \"  Applying AOR-Binary ... ... \" );                 AOR_FLAG = true;                 mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AORS\" )) {                 Debug.println( \"  Applying AOR-Short-Cut ... ... \" );                 AOR_FLAG = true;                 mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AODU\" )) {                 Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );                 mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );                 ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AODS\" )) {                 Debug.println( \"  Applying AOD-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AOIU\" )) {                 Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );                 mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );                 ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AOIS\" )) {                 Debug.println( \"  Applying AOI-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ROR\" )) {                 Debug.println( \"  Applying ROR ... ... \" );                 mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COR\" )) {                 Debug.println( \"  Applying COR ... ... \" );                 mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COD\" )) {                 Debug.println( \"  Applying COD ... ... \" );                 mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COI\" )) {                 Debug.println( \"  Applying COI ... ... \" );                 mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"SOR\" )) {                 Debug.println( \"  Applying SOR ... ... \" );                 mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOR\" )) {                 Debug.println( \"  Applying LOR ... ... \" );                 mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOI\" )) {                 Debug.println( \"  Applying LOI ... ... \" );                 mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOD\" )) {                 Debug.println( \"  Applying LOD ... ... \" );                 mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ASRS\" )) {                 Debug.println( \"  Applying ASR-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"SDL\" )) {                 Debug.println( \"  Applying SDL ... ... \" );                 mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"VDL\" )) {                 Debug.println( \"  Applying VDL ... ... \" );                 mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"CDL\" )) {                 Debug.println( \"  Applying CDL ... ... \" );                 mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ODL\" )) {                 Debug.println( \"  Applying ODL ... ... \" );                 mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );             e.printStackTrace();         }     } }  =>   for (int j = 0;; ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         try {             mujava.op.util.Mutator mutant_op;             boolean AOR_FLAG = false;             if (hasOperator( traditionalOp, \"AORB\" )) {                 Debug.println( \"  Applying AOR-Binary ... ... \" );                 AOR_FLAG = true;                 mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AORS\" )) {                 Debug.println( \"  Applying AOR-Short-Cut ... ... \" );                 AOR_FLAG = true;                 mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AODU\" )) {                 Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );                 mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );                 ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AODS\" )) {                 Debug.println( \"  Applying AOD-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AOIU\" )) {                 Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );                 mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );                 ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AOIS\" )) {                 Debug.println( \"  Applying AOI-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ROR\" )) {                 Debug.println( \"  Applying ROR ... ... \" );                 mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COR\" )) {                 Debug.println( \"  Applying COR ... ... \" );                 mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COD\" )) {                 Debug.println( \"  Applying COD ... ... \" );                 mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COI\" )) {                 Debug.println( \"  Applying COI ... ... \" );                 mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"SOR\" )) {                 Debug.println( \"  Applying SOR ... ... \" );                 mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOR\" )) {                 Debug.println( \"  Applying LOR ... ... \" );                 mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOI\" )) {                 Debug.println( \"  Applying LOI ... ... \" );                 mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOD\" )) {                 Debug.println( \"  Applying LOD ... ... \" );                 mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ASRS\" )) {                 Debug.println( \"  Applying ASR-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"SDL\" )) {                 Debug.println( \"  Applying SDL ... ... \" );                 mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"VDL\" )) {                 Debug.println( \"  Applying VDL ... ... \" );                 mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"CDL\" )) {                 Debug.println( \"  Applying CDL ... ... \" );                 mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ODL\" )) {                 Debug.println( \"  Applying ODL ... ... \" );                 mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );             e.printStackTrace();         }     } }
SDL_226:402:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): for (int j = 0; j < cdecls.size(); ++j) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         try {             mujava.op.util.Mutator mutant_op;             boolean AOR_FLAG = false;             if (hasOperator( traditionalOp, \"AORB\" )) {                 Debug.println( \"  Applying AOR-Binary ... ... \" );                 AOR_FLAG = true;                 mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AORS\" )) {                 Debug.println( \"  Applying AOR-Short-Cut ... ... \" );                 AOR_FLAG = true;                 mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AODU\" )) {                 Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );                 mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );                 ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AODS\" )) {                 Debug.println( \"  Applying AOD-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AOIU\" )) {                 Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );                 mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );                 ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AOIS\" )) {                 Debug.println( \"  Applying AOI-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ROR\" )) {                 Debug.println( \"  Applying ROR ... ... \" );                 mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COR\" )) {                 Debug.println( \"  Applying COR ... ... \" );                 mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COD\" )) {                 Debug.println( \"  Applying COD ... ... \" );                 mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COI\" )) {                 Debug.println( \"  Applying COI ... ... \" );                 mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"SOR\" )) {                 Debug.println( \"  Applying SOR ... ... \" );                 mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOR\" )) {                 Debug.println( \"  Applying LOR ... ... \" );                 mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOI\" )) {                 Debug.println( \"  Applying LOI ... ... \" );                 mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOD\" )) {                 Debug.println( \"  Applying LOD ... ... \" );                 mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ASRS\" )) {                 Debug.println( \"  Applying ASR-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"SDL\" )) {                 Debug.println( \"  Applying SDL ... ... \" );                 mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"VDL\" )) {                 Debug.println( \"  Applying VDL ... ... \" );                 mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"CDL\" )) {                 Debug.println( \"  Applying CDL ... ... \" );                 mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ODL\" )) {                 Debug.println( \"  Applying ODL ... ... \" );                 mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );             e.printStackTrace();         }     } }  =>   for (int j = 0; j < cdecls.size();) {     openjava.ptree.ClassDeclaration cdecl = cdecls.get( j );     if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {         try {             mujava.op.util.Mutator mutant_op;             boolean AOR_FLAG = false;             if (hasOperator( traditionalOp, \"AORB\" )) {                 Debug.println( \"  Applying AOR-Binary ... ... \" );                 AOR_FLAG = true;                 mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AORS\" )) {                 Debug.println( \"  Applying AOR-Short-Cut ... ... \" );                 AOR_FLAG = true;                 mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AODU\" )) {                 Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );                 mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );                 ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AODS\" )) {                 Debug.println( \"  Applying AOD-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AOIU\" )) {                 Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );                 mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );                 ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"AOIS\" )) {                 Debug.println( \"  Applying AOI-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ROR\" )) {                 Debug.println( \"  Applying ROR ... ... \" );                 mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COR\" )) {                 Debug.println( \"  Applying COR ... ... \" );                 mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COD\" )) {                 Debug.println( \"  Applying COD ... ... \" );                 mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"COI\" )) {                 Debug.println( \"  Applying COI ... ... \" );                 mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"SOR\" )) {                 Debug.println( \"  Applying SOR ... ... \" );                 mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOR\" )) {                 Debug.println( \"  Applying LOR ... ... \" );                 mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOI\" )) {                 Debug.println( \"  Applying LOI ... ... \" );                 mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"LOD\" )) {                 Debug.println( \"  Applying LOD ... ... \" );                 mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ASRS\" )) {                 Debug.println( \"  Applying ASR-Short-Cut ... ... \" );                 mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"SDL\" )) {                 Debug.println( \"  Applying SDL ... ... \" );                 mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"VDL\" )) {                 Debug.println( \"  Applying VDL ... ... \" );                 mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"CDL\" )) {                 Debug.println( \"  Applying CDL ... ... \" );                 mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }             if (hasOperator( traditionalOp, \"ODL\" )) {                 Debug.println( \"  Applying ODL ... ... \" );                 mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );                 comp_unit.accept( mutant_op );             }         } catch ( openjava.ptree.ParseTreeException e ) {             System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );             e.printStackTrace();         }     } }
SDL_227:401:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (cdecl.getName().equals( MutationSystem.CLASS_NAME )) {     try {         mujava.op.util.Mutator mutant_op;         boolean AOR_FLAG = false;         if (hasOperator( traditionalOp, \"AORB\" )) {             Debug.println( \"  Applying AOR-Binary ... ... \" );             AOR_FLAG = true;             mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AORS\" )) {             Debug.println( \"  Applying AOR-Short-Cut ... ... \" );             AOR_FLAG = true;             mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AODU\" )) {             Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );             mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );             ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AODS\" )) {             Debug.println( \"  Applying AOD-Short-Cut ... ... \" );             mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AOIU\" )) {             Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );             mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );             ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AOIS\" )) {             Debug.println( \"  Applying AOI-Short-Cut ... ... \" );             mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"ROR\" )) {             Debug.println( \"  Applying ROR ... ... \" );             mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"COR\" )) {             Debug.println( \"  Applying COR ... ... \" );             mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"COD\" )) {             Debug.println( \"  Applying COD ... ... \" );             mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"COI\" )) {             Debug.println( \"  Applying COI ... ... \" );             mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"SOR\" )) {             Debug.println( \"  Applying SOR ... ... \" );             mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"LOR\" )) {             Debug.println( \"  Applying LOR ... ... \" );             mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"LOI\" )) {             Debug.println( \"  Applying LOI ... ... \" );             mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"LOD\" )) {             Debug.println( \"  Applying LOD ... ... \" );             mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"ASRS\" )) {             Debug.println( \"  Applying ASR-Short-Cut ... ... \" );             mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"SDL\" )) {             Debug.println( \"  Applying SDL ... ... \" );             mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"VDL\" )) {             Debug.println( \"  Applying VDL ... ... \" );             mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"CDL\" )) {             Debug.println( \"  Applying CDL ... ... \" );             mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"ODL\" )) {             Debug.println( \"  Applying ODL ... ... \" );             mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }     } catch ( openjava.ptree.ParseTreeException e ) {         System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );         e.printStackTrace();     } }  =>   if (true) {     try {         mujava.op.util.Mutator mutant_op;         boolean AOR_FLAG = false;         if (hasOperator( traditionalOp, \"AORB\" )) {             Debug.println( \"  Applying AOR-Binary ... ... \" );             AOR_FLAG = true;             mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AORS\" )) {             Debug.println( \"  Applying AOR-Short-Cut ... ... \" );             AOR_FLAG = true;             mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AODU\" )) {             Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );             mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );             ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AODS\" )) {             Debug.println( \"  Applying AOD-Short-Cut ... ... \" );             mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AOIU\" )) {             Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );             mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );             ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"AOIS\" )) {             Debug.println( \"  Applying AOI-Short-Cut ... ... \" );             mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"ROR\" )) {             Debug.println( \"  Applying ROR ... ... \" );             mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"COR\" )) {             Debug.println( \"  Applying COR ... ... \" );             mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"COD\" )) {             Debug.println( \"  Applying COD ... ... \" );             mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"COI\" )) {             Debug.println( \"  Applying COI ... ... \" );             mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"SOR\" )) {             Debug.println( \"  Applying SOR ... ... \" );             mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"LOR\" )) {             Debug.println( \"  Applying LOR ... ... \" );             mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"LOI\" )) {             Debug.println( \"  Applying LOI ... ... \" );             mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"LOD\" )) {             Debug.println( \"  Applying LOD ... ... \" );             mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"ASRS\" )) {             Debug.println( \"  Applying ASR-Short-Cut ... ... \" );             mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"SDL\" )) {             Debug.println( \"  Applying SDL ... ... \" );             mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"VDL\" )) {             Debug.println( \"  Applying VDL ... ... \" );             mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"CDL\" )) {             Debug.println( \"  Applying CDL ... ... \" );             mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }         if (hasOperator( traditionalOp, \"ODL\" )) {             Debug.println( \"  Applying ODL ... ... \" );             mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );             comp_unit.accept( mutant_op );         }     } catch ( openjava.ptree.ParseTreeException e ) {         System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );         e.printStackTrace();     } }
SDL_228:391:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_229:391:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_230:391:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_231:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_232:391:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_233:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_234:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_235:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_236:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_237:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_238:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_239:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_240:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_241:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_242:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_243:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_244:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_245:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_246:392:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ODL\" )) {         Debug.println( \"  Applying ODL ... ... \" );         mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } } catch ( openjava.ptree.ParseTreeException e ) {     System.err.println( \"Exception, during generating traditional mutants for the class \" + MutationSystem.CLASS_NAME );     e.printStackTrace(); }  =>   try {     mujava.op.util.Mutator mutant_op;     boolean AOR_FLAG = false;     if (hasOperator( traditionalOp, \"AORB\" )) {         Debug.println( \"  Applying AOR-Binary ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AORS\" )) {         Debug.println( \"  Applying AOR-Short-Cut ... ... \" );         AOR_FLAG = true;         mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODU\" )) {         Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AODS\" )) {         Debug.println( \"  Applying AOD-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIU\" )) {         Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );         mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );         ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"AOIS\" )) {         Debug.println( \"  Applying AOI-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ROR\" )) {         Debug.println( \"  Applying ROR ... ... \" );         mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COR\" )) {         Debug.println( \"  Applying COR ... ... \" );         mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COD\" )) {         Debug.println( \"  Applying COD ... ... \" );         mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"COI\" )) {         Debug.println( \"  Applying COI ... ... \" );         mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SOR\" )) {         Debug.println( \"  Applying SOR ... ... \" );         mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOR\" )) {         Debug.println( \"  Applying LOR ... ... \" );         mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOI\" )) {         Debug.println( \"  Applying LOI ... ... \" );         mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"LOD\" )) {         Debug.println( \"  Applying LOD ... ... \" );         mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"ASRS\" )) {         Debug.println( \"  Applying ASR-Short-Cut ... ... \" );         mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"SDL\" )) {         Debug.println( \"  Applying SDL ... ... \" );         mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"VDL\" )) {         Debug.println( \"  Applying VDL ... ... \" );         mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     }     if (hasOperator( traditionalOp, \"CDL\" )) {         Debug.println( \"  Applying CDL ... ... \" );         mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );         comp_unit.accept( mutant_op );     } }
SDL_247:301:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOR-Binary ... ... \" ); AOR_FLAG = true; mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   AOR_FLAG = true; mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_248:301:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOR-Binary ... ... \" ); AOR_FLAG = true; mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOR-Binary ... ... \" ); mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_249:301:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOR-Binary ... ... \" ); AOR_FLAG = true; mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOR-Binary ... ... \" ); AOR_FLAG = true; comp_unit.accept( mutant_op );
SDL_250:301:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOR-Binary ... ... \" ); AOR_FLAG = true; mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOR-Binary ... ... \" ); AOR_FLAG = true; mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );
SDL_251:303:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"AORB\" )) {     Debug.println( \"  Applying AOR-Binary ... ... \" );     AOR_FLAG = true;     mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying AOR-Binary ... ... \" );     AOR_FLAG = true;     mutant_op = new mujava.op.basic.AORB( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_252:307:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOR-Short-Cut ... ... \" ); AOR_FLAG = true; mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   AOR_FLAG = true; mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_253:307:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOR-Short-Cut ... ... \" ); AOR_FLAG = true; mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOR-Short-Cut ... ... \" ); mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_254:307:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOR-Short-Cut ... ... \" ); AOR_FLAG = true; mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOR-Short-Cut ... ... \" ); AOR_FLAG = true; comp_unit.accept( mutant_op );
SDL_255:307:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOR-Short-Cut ... ... \" ); AOR_FLAG = true; mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOR-Short-Cut ... ... \" ); AOR_FLAG = true; mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );
SDL_256:309:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"AORS\" )) {     Debug.println( \"  Applying AOR-Short-Cut ... ... \" );     AOR_FLAG = true;     mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying AOR-Short-Cut ... ... \" );     AOR_FLAG = true;     mutant_op = new mujava.op.basic.AORS( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_257:313:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOD-Normal-Unary ... ... \" ); mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit ); ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit ); ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG ); comp_unit.accept( mutant_op );
SDL_258:313:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOD-Normal-Unary ... ... \" ); mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit ); ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOD-Normal-Unary ... ... \" ); ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG ); comp_unit.accept( mutant_op );
SDL_259:313:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOD-Normal-Unary ... ... \" ); mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit ); ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOD-Normal-Unary ... ... \" ); mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_260:313:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOD-Normal-Unary ... ... \" ); mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit ); ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOD-Normal-Unary ... ... \" ); mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit ); ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );
SDL_261:315:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"AODU\" )) {     Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );     mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );     ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying AOD-Normal-Unary ... ... \" );     mutant_op = new mujava.op.basic.AODU( file_env, cdecl, comp_unit );     ((mujava.op.basic.AODU) mutant_op).setAORflag( AOR_FLAG );     comp_unit.accept( mutant_op ); }
SDL_262:318:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOD-Short-Cut ... ... \" ); mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_263:318:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOD-Short-Cut ... ... \" ); mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOD-Short-Cut ... ... \" ); comp_unit.accept( mutant_op );
SDL_264:318:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOD-Short-Cut ... ... \" ); mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOD-Short-Cut ... ... \" ); mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );
SDL_265:320:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"AODS\" )) {     Debug.println( \"  Applying AOD-Short-Cut ... ... \" );     mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying AOD-Short-Cut ... ... \" );     mutant_op = new mujava.op.basic.AODS( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_266:324:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOI-Normal-Unary ... ... \" ); mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit ); ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit ); ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG ); comp_unit.accept( mutant_op );
SDL_267:324:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOI-Normal-Unary ... ... \" ); mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit ); ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOI-Normal-Unary ... ... \" ); ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG ); comp_unit.accept( mutant_op );
SDL_268:324:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOI-Normal-Unary ... ... \" ); mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit ); ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOI-Normal-Unary ... ... \" ); mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_269:324:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOI-Normal-Unary ... ... \" ); mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit ); ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOI-Normal-Unary ... ... \" ); mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit ); ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );
SDL_270:326:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"AOIU\" )) {     Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );     mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );     ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying AOI-Normal-Unary ... ... \" );     mutant_op = new mujava.op.basic.AOIU( file_env, cdecl, comp_unit );     ((mujava.op.basic.AOIU) mutant_op).setAORflag( AOR_FLAG );     comp_unit.accept( mutant_op ); }
SDL_271:329:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOI-Short-Cut ... ... \" ); mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_272:329:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOI-Short-Cut ... ... \" ); mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOI-Short-Cut ... ... \" ); comp_unit.accept( mutant_op );
SDL_273:329:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying AOI-Short-Cut ... ... \" ); mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying AOI-Short-Cut ... ... \" ); mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );
SDL_274:331:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"AOIS\" )) {     Debug.println( \"  Applying AOI-Short-Cut ... ... \" );     mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying AOI-Short-Cut ... ... \" );     mutant_op = new mujava.op.basic.AOIS( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_275:334:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ROR ... ... \" ); mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_276:334:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ROR ... ... \" ); mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying ROR ... ... \" ); comp_unit.accept( mutant_op );
SDL_277:334:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ROR ... ... \" ); mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying ROR ... ... \" ); mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );
SDL_278:336:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"ROR\" )) {     Debug.println( \"  Applying ROR ... ... \" );     mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying ROR ... ... \" );     mutant_op = new mujava.op.basic.ROR( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_279:339:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying COR ... ... \" ); mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_280:339:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying COR ... ... \" ); mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying COR ... ... \" ); comp_unit.accept( mutant_op );
SDL_281:339:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying COR ... ... \" ); mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying COR ... ... \" ); mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );
SDL_282:341:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"COR\" )) {     Debug.println( \"  Applying COR ... ... \" );     mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying COR ... ... \" );     mutant_op = new mujava.op.basic.COR( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_283:344:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying COD ... ... \" ); mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_284:344:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying COD ... ... \" ); mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying COD ... ... \" ); comp_unit.accept( mutant_op );
SDL_285:344:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying COD ... ... \" ); mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying COD ... ... \" ); mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );
SDL_286:346:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"COD\" )) {     Debug.println( \"  Applying COD ... ... \" );     mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying COD ... ... \" );     mutant_op = new mujava.op.basic.COD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_287:349:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying COI ... ... \" ); mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_288:349:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying COI ... ... \" ); mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying COI ... ... \" ); comp_unit.accept( mutant_op );
SDL_289:349:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying COI ... ... \" ); mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying COI ... ... \" ); mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );
SDL_290:351:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"COI\" )) {     Debug.println( \"  Applying COI ... ... \" );     mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying COI ... ... \" );     mutant_op = new mujava.op.basic.COI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_291:354:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying SOR ... ... \" ); mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_292:354:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying SOR ... ... \" ); mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying SOR ... ... \" ); comp_unit.accept( mutant_op );
SDL_293:354:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying SOR ... ... \" ); mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying SOR ... ... \" ); mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );
SDL_294:356:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"SOR\" )) {     Debug.println( \"  Applying SOR ... ... \" );     mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying SOR ... ... \" );     mutant_op = new mujava.op.basic.SOR( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_295:359:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying LOR ... ... \" ); mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_296:359:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying LOR ... ... \" ); mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying LOR ... ... \" ); comp_unit.accept( mutant_op );
SDL_297:359:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying LOR ... ... \" ); mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying LOR ... ... \" ); mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );
SDL_298:361:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"LOR\" )) {     Debug.println( \"  Applying LOR ... ... \" );     mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying LOR ... ... \" );     mutant_op = new mujava.op.basic.LOR( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_299:364:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying LOI ... ... \" ); mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_300:364:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying LOI ... ... \" ); mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying LOI ... ... \" ); comp_unit.accept( mutant_op );
SDL_301:364:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying LOI ... ... \" ); mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying LOI ... ... \" ); mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );
SDL_302:366:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"LOI\" )) {     Debug.println( \"  Applying LOI ... ... \" );     mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying LOI ... ... \" );     mutant_op = new mujava.op.basic.LOI( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_303:369:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying LOD ... ... \" ); mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_304:369:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying LOD ... ... \" ); mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying LOD ... ... \" ); comp_unit.accept( mutant_op );
SDL_305:369:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying LOD ... ... \" ); mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying LOD ... ... \" ); mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );
SDL_306:371:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"LOD\" )) {     Debug.println( \"  Applying LOD ... ... \" );     mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying LOD ... ... \" );     mutant_op = new mujava.op.basic.LOD( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_307:374:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ASR-Short-Cut ... ... \" ); mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_308:374:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ASR-Short-Cut ... ... \" ); mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying ASR-Short-Cut ... ... \" ); comp_unit.accept( mutant_op );
SDL_309:374:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ASR-Short-Cut ... ... \" ); mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying ASR-Short-Cut ... ... \" ); mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );
SDL_310:376:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"ASRS\" )) {     Debug.println( \"  Applying ASR-Short-Cut ... ... \" );     mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying ASR-Short-Cut ... ... \" );     mutant_op = new mujava.op.basic.ASRS( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_311:379:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying SDL ... ... \" ); mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_312:379:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying SDL ... ... \" ); mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying SDL ... ... \" ); comp_unit.accept( mutant_op );
SDL_313:379:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying SDL ... ... \" ); mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying SDL ... ... \" ); mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );
SDL_314:381:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"SDL\" )) {     Debug.println( \"  Applying SDL ... ... \" );     mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying SDL ... ... \" );     mutant_op = new mujava.op.basic.SDL( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_315:384:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying VDL ... ... \" ); mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_316:384:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying VDL ... ... \" ); mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying VDL ... ... \" ); comp_unit.accept( mutant_op );
SDL_317:384:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying VDL ... ... \" ); mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying VDL ... ... \" ); mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );
SDL_318:386:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"VDL\" )) {     Debug.println( \"  Applying VDL ... ... \" );     mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying VDL ... ... \" );     mutant_op = new mujava.op.basic.VDL( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_319:389:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying CDL ... ... \" ); mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_320:389:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying CDL ... ... \" ); mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying CDL ... ... \" ); comp_unit.accept( mutant_op );
SDL_321:389:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying CDL ... ... \" ); mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying CDL ... ... \" ); mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );
SDL_322:391:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"CDL\" )) {     Debug.println( \"  Applying CDL ... ... \" );     mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying CDL ... ... \" );     mutant_op = new mujava.op.basic.CDL( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
SDL_323:394:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ODL ... ... \" ); mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );
SDL_324:394:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ODL ... ... \" ); mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying ODL ... ... \" ); comp_unit.accept( mutant_op );
SDL_325:394:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): Debug.println( \"  Applying ODL ... ... \" ); mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit ); comp_unit.accept( mutant_op );  =>   Debug.println( \"  Applying ODL ... ... \" ); mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );
SDL_326:396:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList): if (hasOperator( traditionalOp, \"ODL\" )) {     Debug.println( \"  Applying ODL ... ... \" );     mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }  =>   if (true) {     Debug.println( \"  Applying ODL ... ... \" );     mutant_op = new mujava.op.basic.ODL( file_env, cdecl, comp_unit );     comp_unit.accept( mutant_op ); }
VDL_1:48:void_genMutants():comp_unit == null => null
VDL_2:49:void_genMutants():original_file + " is skipped." => " is skipped."
VDL_3:52:void_genMutants():cdecls == null => null
VDL_4:55:void_genMutants():traditionalOp != null => null
VDL_5:63:void_genMutants():classOp != null => null
VDL_6:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j < cdecls.size() => cdecls.size()
VDL_7:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList):++j =>  
VDL_8:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j < cdecls.size() => cdecls.size()
VDL_9:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList):++j =>  
VDL_10:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k < temp_str.length() => temp_str.length()
VDL_11:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k++ =>  
VDL_12:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c == '.' => '.'
VDL_13:145:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + "/" => "/"
VDL_14:147:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + c => c
VDL_15:147:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + c => result_str
VDL_16:150:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + ".java" => ".java"
VDL_17:277:void_compileMutants():traditionalOp != null => null
VDL_18:282:void_compileMutants():classOp != null => null
VDL_19:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):j < cdecls.size() => cdecls.size()
VDL_20:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):++j =>  
ODL_1:48:void_genMutants():comp_unit == null => comp_unit
ODL_2:48:void_genMutants():comp_unit == null => null
ODL_3:49:void_genMutants():original_file + " is skipped." => original_file
ODL_4:49:void_genMutants():original_file + " is skipped." => " is skipped."
ODL_5:52:void_genMutants():cdecls == null => cdecls
ODL_6:52:void_genMutants():cdecls == null => null
ODL_7:52:void_genMutants():cdecls.size() == 0 => cdecls.size()
ODL_8:52:void_genMutants():cdecls.size() == 0 => 0
ODL_9:52:void_genMutants():cdecls == null || cdecls.size() == 0 => cdecls == null
ODL_10:52:void_genMutants():cdecls == null || cdecls.size() == 0 => cdecls.size() == 0
ODL_11:55:void_genMutants():traditionalOp != null => traditionalOp
ODL_12:55:void_genMutants():traditionalOp != null => null
ODL_13:55:void_genMutants():traditionalOp.length > 0 => traditionalOp.length
ODL_14:55:void_genMutants():traditionalOp.length > 0 => 0
ODL_15:55:void_genMutants():traditionalOp != null && traditionalOp.length > 0 => traditionalOp != null
ODL_16:55:void_genMutants():traditionalOp != null && traditionalOp.length > 0 => traditionalOp.length > 0
ODL_17:63:void_genMutants():classOp != null => classOp
ODL_18:63:void_genMutants():classOp != null => null
ODL_19:63:void_genMutants():classOp.length > 0 => classOp.length
ODL_20:63:void_genMutants():classOp.length > 0 => 0
ODL_21:63:void_genMutants():classOp != null && classOp.length > 0 => classOp != null
ODL_22:63:void_genMutants():classOp != null && classOp.length > 0 => classOp.length > 0
ODL_23:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j < cdecls.size() => j
ODL_24:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList):j < cdecls.size() => cdecls.size()
ODL_25:81:void_genClassMutants2(openjava.ptree.ClassDeclarationList):++j => j
ODL_26:89:void_genClassMutants2(openjava.ptree.ClassDeclarationList):((mujava.op.IHD) mutant_op).getTotal() > 0 => ((mujava.op.IHD) mutant_op).getTotal()
ODL_27:89:void_genClassMutants2(openjava.ptree.ClassDeclarationList):((mujava.op.IHD) mutant_op).getTotal() > 0 => 0
ODL_28:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j < cdecls.size() => j
ODL_29:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList):j < cdecls.size() => cdecls.size()
ODL_30:124:void_genClassMutants1(openjava.ptree.ClassDeclarationList):++j => j
ODL_31:139:void_genClassMutants1(openjava.ptree.ClassDeclarationList):!parent_class.getName().equals( "java.lang.Object" ) => parent_class.getName().equals( "java.lang.Object" )
ODL_32:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k < temp_str.length() => k
ODL_33:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k < temp_str.length() => temp_str.length()
ODL_34:142:void_genClassMutants1(openjava.ptree.ClassDeclarationList):k++ => k
ODL_35:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c == '.' => c
ODL_36:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c == '.' => '.'
ODL_37:145:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + "/" => result_str
ODL_38:145:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + "/" => "/"
ODL_39:147:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + c => result_str
ODL_40:147:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + c => c
ODL_41:150:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + ".java" => result_str
ODL_42:150:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + ".java" => ".java"
ODL_43:277:void_compileMutants():traditionalOp != null => traditionalOp
ODL_44:277:void_compileMutants():traditionalOp != null => null
ODL_45:277:void_compileMutants():traditionalOp.length > 0 => traditionalOp.length
ODL_46:277:void_compileMutants():traditionalOp.length > 0 => 0
ODL_47:277:void_compileMutants():traditionalOp != null && traditionalOp.length > 0 => traditionalOp != null
ODL_48:277:void_compileMutants():traditionalOp != null && traditionalOp.length > 0 => traditionalOp.length > 0
ODL_49:282:void_compileMutants():classOp != null => classOp
ODL_50:282:void_compileMutants():classOp != null => null
ODL_51:282:void_compileMutants():classOp.length > 0 => classOp.length
ODL_52:282:void_compileMutants():classOp.length > 0 => 0
ODL_53:282:void_compileMutants():classOp != null && classOp.length > 0 => classOp != null
ODL_54:282:void_compileMutants():classOp != null && classOp.length > 0 => classOp.length > 0
ODL_55:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):j < cdecls.size() => j
ODL_56:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):j < cdecls.size() => cdecls.size()
ODL_57:291:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):++j => j
ODL_58:397:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):"Exception, during generating traditional mutants for the class " + MutationSystem.CLASS_NAME => "Exception, during generating traditional mutants for the class "
ODL_59:397:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):"Exception, during generating traditional mutants for the class " + MutationSystem.CLASS_NAME => MutationSystem.CLASS_NAME
CDL_1:48:void_genMutants():comp_unit == null => comp_unit
CDL_2:49:void_genMutants():original_file + " is skipped." => original_file
CDL_3:52:void_genMutants():cdecls == null => cdecls
CDL_4:52:void_genMutants():cdecls.size() == 0 => cdecls.size()
CDL_5:55:void_genMutants():traditionalOp != null => traditionalOp
CDL_6:55:void_genMutants():traditionalOp.length > 0 => traditionalOp.length
CDL_7:63:void_genMutants():classOp != null => classOp
CDL_8:63:void_genMutants():classOp.length > 0 => classOp.length
CDL_9:89:void_genClassMutants2(openjava.ptree.ClassDeclarationList):((mujava.op.IHD) mutant_op).getTotal() > 0 => ((mujava.op.IHD) mutant_op).getTotal()
CDL_10:144:void_genClassMutants1(openjava.ptree.ClassDeclarationList):c == '.' => c
CDL_11:145:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + "/" => result_str
CDL_12:150:void_genClassMutants1(openjava.ptree.ClassDeclarationList):result_str + ".java" => result_str
CDL_13:277:void_compileMutants():traditionalOp != null => traditionalOp
CDL_14:277:void_compileMutants():traditionalOp.length > 0 => traditionalOp.length
CDL_15:282:void_compileMutants():classOp != null => classOp
CDL_16:282:void_compileMutants():classOp.length > 0 => classOp.length
CDL_17:397:void_genTraditionalMutants(openjava.ptree.ClassDeclarationList):"Exception, during generating traditional mutants for the class " + MutationSystem.CLASS_NAME => MutationSystem.CLASS_NAME
